<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>malloc源码阅读1</title>
    <link href="/2025/09/25/malloc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2025/09/25/malloc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><p>glibc-2.27</p><p><a href="https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c">https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c</a></p><p>有时不必过于关注宏的具体实现，可以根据宏的名称大致推断。“望文生义”可能会丢失一些细节，但可以对整体逻辑有一个更快的把握，不至于淹没在各种符号展开中。</p><p><del>其实是因为我懒。</del></p><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><h3 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h3><p>glibc-2.26后引入tcache机制，但不同版本的实现有所不同。glibc-2.27的tcache检查在<code>_int_malloc</code>的调用者<code>__libc_malloc</code>中:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">... <span class="hljs-comment">/*如果请求的内存对应堆块大小在tcache bin范围(0x20~0x410)且对应bin中有空闲堆块，则直接取用并返回tcache中的对应堆块指针，不再调用_int_malloc*/</span><br><span class="hljs-keyword">if</span> (tc_idx &lt; mp_.tcache_bins<br>      <span class="hljs-comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="hljs-comment">/* to appease gcc */</span><br>      &amp;&amp; tcache<br>      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-keyword">return</span> tcache_get (tc_idx);<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h3><p>若tcache未命中，进入fastbin判断部分，在<code>_int_malloc</code>中:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br>  <span class="hljs-comment">/*检查用户请求内存大小bytes并将其转化为标准大小nb*/</span><br>checked_request2size (bytes, nb); <br>  <span class="hljs-comment">/*当前线程未被关联到任何arena，常发生在第一次malloc*/</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (av == <span class="hljs-literal">NULL</span>))<br>    &#123;<br>      <span class="hljs-type">void</span> *p = sysmalloc (nb, av); <span class="hljs-comment">//sysmalloc分配arena并返回新分配堆块的mem指针</span><br>      <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>alloc_perturb (p, bytes);<br>      <span class="hljs-keyword">return</span> p;<br>    &#125;<br>...<br>  <span class="hljs-comment">/*尝试fastbin(0x20~0x90)*/</span><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (get_max_fast ()))<br>    &#123;<br>      idx = fastbin_index (nb);<br>      mfastbinptr *fb = &amp;fastbin (av, idx); <span class="hljs-comment">//取fastbin对应大小索引的头指针</span><br>      mchunkptr pp;<br>      victim = *fb;<br><br>    <span class="hljs-comment">/*若对应大小有空闲堆块，尝试取出，否则fastbin分支结束*/</span><br>      <span class="hljs-keyword">if</span> (victim != <span class="hljs-literal">NULL</span>)<br>&#123;<br>        <span class="hljs-comment">/*LIFO，尝试取第一个（首个被free的）堆块victim-&gt;fd*/</span><br>  <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)<br>    *fb = victim-&gt;fd; <span class="hljs-comment">//单线程</span><br>  <span class="hljs-keyword">else</span><br>    REMOVE_FB (fb, pp, victim); <span class="hljs-comment">//多线程，原子操作防竞态</span><br>        <br>      <span class="hljs-comment">//安全检查</span><br>  <span class="hljs-keyword">if</span> (__glibc_likely (victim != <span class="hljs-literal">NULL</span>))<br>    &#123;<br>      <span class="hljs-type">size_t</span> victim_idx = fastbin_index (chunksize (victim));<br>      <span class="hljs-keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="hljs-number">0</span>)) <span class="hljs-comment">//防止堆块伪造。若该分支成立，说明victim的大小事实上不在fastbin对应大小，却被放入fastbin，说明很有可能一块不属于fastbin的内存被伪造成fastbin并存入，那么直接报错并退出</span><br>malloc_printerr (<span class="hljs-string">&quot;malloc(): memory corruption (fast)&quot;</span>);<br>      check_remalloced_chunk (av, victim, nb);<br>        <br>        <span class="hljs-comment">/*堆块取用完成后并不直接退出，而是继续检查该大小fastbin链表是否有其他堆块，如果有，将这些堆块放入tcache以加快分配速度*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>      <span class="hljs-comment">/* While we&#x27;re here, if we see other chunks of the same size,</span><br><span class="hljs-comment"> stash them in the tcache.  */</span><br>      <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<br>      <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>&#123;<br>  mchunkptr tc_victim;<br><br>  <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks.  */</span><br>  <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count<br> &amp;&amp; (tc_victim = *fb) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)<br>*fb = tc_victim-&gt;fd;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  REMOVE_FB (fb, pp, tc_victim);<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (tc_victim == <span class="hljs-literal">NULL</span>))<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>      tcache_put (tc_victim, tc_idx);<br>    &#125;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-comment">//返回成功分配的堆块指针</span><br>      <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>      alloc_perturb (p, bytes);<br>      <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;<br>&#125;<br>  <br></code></pre></td></tr></table></figure><h3 id="smallbin"><a href="#smallbin" class="headerlink" title="smallbin"></a>smallbin</h3><p>若fastbin未命中，进入smallbin判断:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//尝试smallbin(0x20~0x400)</span><br><span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>    &#123;<br>  <span class="hljs-comment">//取对应大小的bin指针头.这个 bin 本身是一个“哨兵”节点，它的 fd 和 bk 指针指向对应大小链表中的第一个和最后一个真实 chunk</span><br>      idx = smallbin_index (nb);<br>      bin = bin_at (av, idx);<br><br>  <span class="hljs-comment">//若链表不为空（bin-&gt;bk != bin）则开始尝试取chunk，否则结束smallbin分支</span><br>      <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>        &#123;<br>        <span class="hljs-comment">//FIFO，链表头部堆块为最先进入的</span><br>          bck = victim-&gt;bk;<br>        <span class="hljs-comment">//安全检查，如果victim-&gt;bk-&gt;fd != victim，则证明堆块可能被篡改</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);<br>          set_inuse_bit_at_offset (victim, nb);<br>          <span class="hljs-comment">//将堆块从smallbin中unlink</span><br>          bin-&gt;bk = bck;<br>          bck-&gt;fd = bin;<br><br>          <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>    set_non_main_arena (victim);<br>          check_malloced_chunk (av, victim, nb);<br>        <br>        <span class="hljs-comment">//tcache加速，与fastbin基本一致</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//返回成功分配的堆块指针</span><br>...<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><p>若smallbin未命中，且请求范围超出smallbin范围（请求内存较大），则首先进行fastbin的碎片堆块合并操作:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span><br>  &#123;<br>    idx = largebin_index (nb); <span class="hljs-comment">//计算最合适的largebin索引</span><br>    <span class="hljs-keyword">if</span> (atomic_load_relaxed (&amp;av-&gt;have_fastchunks)) <br>      malloc_consolidate (av); <span class="hljs-comment">//如果fastbin中有零碎堆块，那么取出所有的fastbin堆块，进行向前/向后合并操作，并将合并后的堆块放入unsorted bin中</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>该操作的意义是什么呢？这是一种前瞻性的优化。由于分配的大小超过了smallbin的范围，那么可以预见的是，将会进行一次较大的内存分配。将fastbin中的碎片化堆块进行合并，成为更大的堆块并放入unsorted bin，可以提高接下来在unsorted bin中命中的概率，减少需要通过sysmalloc再次向系统申请内存的可能性。</p><p>接下来进行较为复杂的对unsorted bin的操作:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//判断当前申请内存大小是否可以放入tcache bin，进行一些初始化，方便后续tcache操作。详情见for循环中以及之后的注释</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  INTERNAL_SIZE_T tcache_nb = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<br>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>    tcache_nb = nb;<br>  <span class="hljs-type">int</span> return_cached = <span class="hljs-number">0</span>;<br>  tcache_unsorted_count = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">for</span> (;; )<br>    &#123;<br>      <span class="hljs-type">int</span> iters = <span class="hljs-number">0</span>;<br>  <br>  <span class="hljs-comment">/*取下unsorted bin中的堆块并处理，直到unsorted bin为空*/</span><br>      <span class="hljs-keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<br>        &#123;<br>          bck = victim-&gt;bk;<br>        <br>        <span class="hljs-comment">/*安全检查。若victim的size字段异常，则堆块元数据损坏，报错退出*/</span><br>          <span class="hljs-keyword">if</span> (__builtin_expect (chunksize_nomask (victim) &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>              || __builtin_expect (chunksize_nomask (victim)<br>   &gt; av-&gt;system_mem, <span class="hljs-number">0</span>))<br>            malloc_printerr (<span class="hljs-string">&quot;malloc(): memory corruption&quot;</span>);<br>          size = chunksize (victim);<br><br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">             If a small request, try to use last remainder if it is the</span><br><span class="hljs-comment">             only chunk in unsorted bin.  This helps promote locality for</span><br><span class="hljs-comment">             runs of consecutive small requests. This is the only</span><br><span class="hljs-comment">             exception to best-fit, and applies only when there is</span><br><span class="hljs-comment">             no exact fit for a small chunk.</span><br><span class="hljs-comment">           */</span><br>        <br><span class="hljs-comment">/*上述注释大意为，下面的操作正在进行一个局部性优化。若nb在smallbin范围，且unsorted bin中只有一个chunk，并且正在操作的chunk正是上一次切割top chunk的剩余部分，并且其大小足够本次请求后再切出一个最小块，那么malloc将会认为程序正在进行连续的小内存分配行为。为了让这些小内存块在物理地址上尽可能相邻，会直接从last_remainder上切一块返回。*/</span><br>          <span class="hljs-keyword">if</span> (in_smallbin_range (nb) &amp;&amp;<br>              bck == unsorted_chunks (av) &amp;&amp;<br>              victim == av-&gt;last_remainder &amp;&amp;<br>              (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE))<br>            &#123;<br>              <span class="hljs-comment">/* split and reattach remainder */</span><br>              remainder_size = size - nb;<br>              remainder = chunk_at_offset (victim, nb);  <span class="hljs-comment">//切下需要大小后的剩余部分</span><br>             <span class="hljs-comment">//更新last remainder并将其放回unsorted bin</span><br>              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;<br>              av-&gt;last_remainder = remainder; <br>              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av); <br>             ...<br>            <span class="hljs-comment">//返回切下的堆块</span><br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            &#125;<br><br>          <span class="hljs-comment">/* remove from unsorted list */</span><br>        <span class="hljs-comment">//unlink将victim从unsorted bin链表中摘下</span><br>          unsorted_chunks (av)-&gt;bk = bck;<br>          bck-&gt;fd = unsorted_chunks (av);<br><br>          <span class="hljs-comment">/* Take now instead of binning if exact fit */</span><br><span class="hljs-comment">/*如果victim的大小完全匹配请求大小，尝试将其先放入tcache并记录，否则直接返回victim*/</span><br>          <span class="hljs-keyword">if</span> (size == nb)<br>            &#123;<br>              set_inuse_bit_at_offset (victim, size);<br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>set_non_main_arena (victim);<br>            <br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>      <span class="hljs-comment">/* Fill cache first, return to user only if cache fills.</span><br><span class="hljs-comment"> We may return one of these chunks later.  */</span><br>        <span class="hljs-comment">//如果tcache_nb被激活，且对应tcache还有空间，那么不直接返回，而是放入tcache</span><br>      <span class="hljs-keyword">if</span> (tcache_nb<br>  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<br>&#123;<br>  tcache_put (victim, tc_idx); <span class="hljs-comment">//放入tcache</span><br>  return_cached = <span class="hljs-number">1</span>; <span class="hljs-comment">//记忆，表示为用户缓存了一个大小合适的堆块</span><br>  <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//继续搜寻unsorted bin中，尝试找到更多chunk来填充tcache</span><br>&#125;<br>        <span class="hljs-comment">//否则直接返回chunk指针</span><br>      <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>              ...<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>            &#125;<br><br>          <span class="hljs-comment">/* place chunk in bin */</span><br><span class="hljs-comment">/*大小不匹配，开始将该堆块进行归类*/</span><br>        <br>        <span class="hljs-comment">//如果是smallbin范围内，则头插法放入smallbin对应索引</span><br>          <span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>            &#123;<br>              victim_index = smallbin_index (size);<br>              bck = bin_at (av, victim_index);<br>              fwd = bck-&gt;fd;<br>            &#125;<br>        <span class="hljs-comment">//否则是largebin范围，进行一系列处理</span><br>          <span class="hljs-keyword">else</span><br>            &#123;<br>            <span class="hljs-comment">//计算victim所属范围的largebin索引</span><br>              victim_index = largebin_index (size);<br>              bck = bin_at (av, victim_index); <span class="hljs-comment">//bck初始化为哨兵</span><br>              fwd = bck-&gt;fd; <span class="hljs-comment">//fwd初始化为尺寸最小堆块</span><br><br>              <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>            <span class="hljs-comment">/*如果链表不为空，开始遍历对应largebin链表*/</span><br>              <span class="hljs-keyword">if</span> (fwd != bck)<br>                &#123;<br>                <span class="hljs-comment">/*统一size格式，防止因size标志位不同所产生的排序bug/</span><br><span class="hljs-comment">                  /* Or with inuse bit to speed comparisons */</span><br>                  size |= PREV_INUSE;<br>                  <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                  assert (chunk_main_arena (bck-&gt;bk));<br>                <br>                <span class="hljs-comment">/*如果已经是该largebin链表中最小的块，那么直接插入链表头部*/</span><br>                  <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size)<br>      &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (bck-&gt;bk))<br>                  &#123;<br>                      fwd = bck; <span class="hljs-comment">//fwd赋值为头部哨兵节点</span><br>                      bck = bck-&gt;bk; <span class="hljs-comment">//bck赋值为原先的最小chunk</span><br>                      <span class="hljs-comment">//将victim联入nextsize链表</span><br>                      victim-&gt;fd_nextsize = fwd-&gt;fd; <span class="hljs-comment">//fwd-&gt;fd是原链表中的最大尺寸堆块的代表，将其设为victim的前驱</span><br>                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize; <span class="hljs-comment">//fwd-&gt;fd-&gt;bk_nextsize是原链表中的最小尺寸堆块的代表，将其设为victim的后继</span><br>                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; <span class="hljs-comment">//将原链表的头尾两堆块未被设置的nextsize指针都指向victim，完成victim的插入</span><br>                    &#125;<br>                <span class="hljs-comment">/*若不是最小堆块，则继续操作*/</span><br>                  <span class="hljs-keyword">else</span><br>                    &#123;<br>                      assert (chunk_main_arena (fwd));<br>                    <span class="hljs-comment">/*遍历nextsize链表，直到找到大于或等于当前unsorted bin chunk大小的堆块组*/</span><br>                      <span class="hljs-keyword">while</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size &lt; chunksize_nomask (fwd))<br>                        &#123;<br>                          fwd = fwd-&gt;fd_nextsize; <span class="hljs-comment">//遍历操作</span><br>  assert (chunk_main_arena (fwd));<br>                        &#125;<br><span class="hljs-comment">/*如果fwd堆块组的size等于当前unsorted bin chunk，则设置其前驱，使其插入该堆块组的第二个位置*/</span><br>                      <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) size<br>  == (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (fwd))<br>                        <span class="hljs-comment">/* Always insert in the second position.  */</span><br>                        fwd = fwd-&gt;fd;<br>                    <span class="hljs-comment">/*如果size更大，说明当前没有与size匹配的堆块组，那么将该堆块作为一个新堆块组的代表并插入nextsize链表*/</span><br>                      <span class="hljs-keyword">else</span><br>                        &#123;<br>                          victim-&gt;fd_nextsize = fwd; <br>                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                          fwd-&gt;bk_nextsize = victim;<br>                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                        &#125;<br>                      bck = fwd-&gt;bk;<br>                    &#125;<br>                &#125;<br>            <span class="hljs-comment">/*如果链表为空，直接将victim初始化，所有nextsize指针指向自己*/</span><br>              <span class="hljs-keyword">else</span><br>                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<br>            &#125;<br><br>          mark_bin (av, victim_index);<br>        <span class="hljs-comment">/*按照设置好的前驱与后继，将victim插入largebin链表*/</span><br>          victim-&gt;bk = bck;<br>          victim-&gt;fd = fwd;<br>          fwd-&gt;bk = victim;<br>          bck-&gt;fd = victim;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>      <span class="hljs-comment">/* If we&#x27;ve processed as many chunks as we&#x27;re allowed while</span><br><span class="hljs-comment"> filling the cache, return one of the cached ones.  */</span><br>      <span class="hljs-comment">/*如果处理了足够多的堆块，且有寄存在tcache中的堆块，那么直接返回这个tcache中的堆块*/</span><br>      ++tcache_unsorted_count;<br>      <span class="hljs-keyword">if</span> (return_cached<br>  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="hljs-number">0</span><br>  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)<br>&#123;<br>  <span class="hljs-keyword">return</span> tcache_get (tc_idx);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>        <span class="hljs-comment">/*控制处理unsorted bin的次数*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ITERS       10000</span><br>          <span class="hljs-keyword">if</span> (++iters &gt;= MAX_ITERS)<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/*tcache中有缓存堆块，直接返回*/</span><br>      <span class="hljs-comment">/* If all the small chunks we found ended up cached, return one now.  */</span><br>      <span class="hljs-keyword">if</span> (return_cached)<br>&#123;<br>  <span class="hljs-keyword">return</span> tcache_get (tc_idx);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这部分内容比较复杂，小总结：</p><ul><li>特殊优化，对于满足条件的unsorted bin堆块直接返回；</li><li>从unsorted bin中取下victim堆块，如果victim完全符合请求大小，则根据tcache的情况，判断是先将其缓存至tcache还是直接返回；</li><li>如果大小不完全符合，那么根据堆块大小将victim放入smallbin&#x2F;largebin；</li><li>如果tcache中有缓存堆块，返回。</li></ul><p>关于分支开头的特殊优化：</p><p>内存分配器的设计理念为尽可能使得逻辑相邻的内存在物理上也相邻。如果unsorted bin中的唯一堆块是从top chunk上分配后剩余下来的，并且马上要进行一次较小的分配，那么malloc推测，程序正在进行连续的小内存分配，于是直接从top chunk切下符合大小的一块返回，使得其与上一次从top chunk切下的内存物理相邻。</p><h3 id="largebin"><a href="#largebin" class="headerlink" title="largebin"></a>largebin</h3><p class="note note=warning">该部分与对unsorted bin的处理在同一个for(;;)循环中。</p><p>如果unsorted bin未命中，进入largebin判断:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-comment">/*不在smallbin范围，则可能为largebin*/</span><br><span class="hljs-keyword">if</span> (!in_smallbin_range (nb))<br>    &#123;<br>      bin = bin_at (av, idx); <span class="hljs-comment">//idx为unsorted bin处理之前计算出的largebin索引</span><br><br>      <span class="hljs-comment">/* skip scan if empty or largest chunk is too small */</span><br>      <span class="hljs-keyword">if</span> ((victim = first (bin)) != bin<br>   &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) chunksize_nomask (victim)<br>     &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb))<br>        &#123;<br>          victim = victim-&gt;bk_nextsize;<br>        <br>        <span class="hljs-comment">/*遍历链表，找到大于或等于请求大小的第一个堆块组*/</span><br>          <span class="hljs-keyword">while</span> (((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size = chunksize (victim)) &lt;<br>                  (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb)))<br>            victim = victim-&gt;bk_nextsize;<br><br>        <span class="hljs-comment">/*此时victim为大于或等于请求大小的第一个堆块代表*/</span><br>          <span class="hljs-comment">/* Avoid removing the first entry for a size so that the skip</span><br><span class="hljs-comment">             list does not have to be rerouted.  */</span><br>        <br>        <span class="hljs-comment">/*如果victim代表的堆块组中还有其他堆块，那么取用该组中的下一个堆块而不是victim，这样可以避免修改堆块代表*/</span><br>          <span class="hljs-keyword">if</span> (victim != last (bin)<br>&amp;&amp; chunksize_nomask (victim)<br>  == chunksize_nomask (victim-&gt;fd))<br>            victim = victim-&gt;fd;<br><br>          remainder_size = size - nb;<br>        <span class="hljs-comment">//取下堆块</span><br>          unlink (av, victim, bck, fwd);<br><br>        <span class="hljs-comment">/*如果切割victim之后剩余内存大小不足以构成一个最小堆块，那么直接将整个victim返回给用户。*/</span><br>          <span class="hljs-comment">/* Exhaust */</span><br>          <span class="hljs-keyword">if</span> (remainder_size &lt; MINSIZE)<br>            &#123;<br>              set_inuse_bit_at_offset (victim, size);<br>              <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>  set_non_main_arena (victim);<br>            &#125;<br>        <span class="hljs-comment">/*如果足够，那么切下用户需要大小的返回给用户，余下部分形成一个堆块放入unsorted bin*/</span><br>          <span class="hljs-comment">/* Split */</span><br>          <span class="hljs-keyword">else</span><br>            &#123;<br>              remainder = chunk_at_offset (victim, nb);<br>              <span class="hljs-comment">/* We cannot assume the unsorted list is empty and therefore</span><br><span class="hljs-comment">                 have to perform a complete insert here.  */</span><br>              bck = unsorted_chunks (av);<br>              fwd = bck-&gt;fd;<br><span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): corrupted unsorted chunks&quot;</span>);<br>              remainder-&gt;bk = bck;<br>              remainder-&gt;fd = fwd;<br>              bck-&gt;fd = remainder;<br>              fwd-&gt;bk = remainder;<br>              <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>                &#123;<br>                  remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                  remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>                &#125;<br>              set_head (victim, nb | PREV_INUSE |<br>                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>              set_head (remainder, remainder_size | PREV_INUSE);<br>              set_foot (remainder, remainder_size);<br>            &#125;<br>        <br>        <br>        <span class="hljs-comment">/*返回所选堆块给用户*/</span><br>          ...<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Final-attempts"><a href="#Final-attempts" class="headerlink" title="Final attempts"></a>Final attempts</h3><p>如果对应的largebin中也没有命中，则开始最后的分配尝试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">/*</span><br><span class="hljs-comment">         Search for a chunk by scanning bins, starting with next largest</span><br><span class="hljs-comment">         bin. This search is strictly by best-fit; i.e., the smallest</span><br><span class="hljs-comment">         (with ties going to approximately the least recently used) chunk</span><br><span class="hljs-comment">         that fits is selected.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         The bitmap avoids needing to check that most blocks are nonempty.</span><br><span class="hljs-comment">         The particular case of skipping all bins during warm-up phases</span><br><span class="hljs-comment">         when no chunks have been returned yet is faster than it might look.</span><br><span class="hljs-comment">       */</span><br><br><span class="hljs-comment">/*接下来这一段操作为，从下一个bin开始，借助位图快速寻找存在堆块的bin，能取到的堆块一定满足要求（在初始idx索引的后方），直接取用*/</span><br>      ++idx;<br>      bin = bin_at (av, idx);<br>      block = idx2block (idx);<br>      <span class="hljs-built_in">map</span> = av-&gt;binmap[block];<br>      bit = idx2bit (idx);<br><br>      <span class="hljs-keyword">for</span> (;; )<br>        &#123;<br>          <span class="hljs-comment">/* Skip rest of block if there are no more set bits in this block.  */</span><br>          <span class="hljs-keyword">if</span> (bit &gt; <span class="hljs-built_in">map</span> || bit == <span class="hljs-number">0</span>)<br>            &#123;<br>              <span class="hljs-keyword">do</span><br>                &#123;<br>                  <span class="hljs-comment">/*剩余bin全为空，跳转至use_top进行top chunk的分割尝试*/</span><br>                  <span class="hljs-keyword">if</span> (++block &gt;= BINMAPSIZE) <span class="hljs-comment">/* out of bins */</span><br>                    <span class="hljs-keyword">goto</span> use_top;<br>                &#125;<br>              <span class="hljs-keyword">while</span> ((<span class="hljs-built_in">map</span> = av-&gt;binmap[block]) == <span class="hljs-number">0</span>);<br><br>              bin = bin_at (av, (block &lt;&lt; BINMAPSHIFT));<br>              bit = <span class="hljs-number">1</span>;<br>            &#125;<br><br>          <span class="hljs-comment">/* Advance to bin with set bit. There must be one. */</span><br>          <span class="hljs-keyword">while</span> ((bit &amp; <span class="hljs-built_in">map</span>) == <span class="hljs-number">0</span>)<br>            &#123;<br>              bin = next_bin (bin);<br>              bit &lt;&lt;= <span class="hljs-number">1</span>;<br>              assert (bit != <span class="hljs-number">0</span>);<br>            &#125;<br><br>          <span class="hljs-comment">/* Inspect the bin. It is likely to be non-empty */</span><br>          victim = last (bin);<br><br>          <span class="hljs-comment">/*  If a false alarm (empty bin), clear the bit. */</span><br>          <span class="hljs-keyword">if</span> (victim == bin)<br>            &#123;<br>              av-&gt;binmap[block] = <span class="hljs-built_in">map</span> &amp;= ~bit; <span class="hljs-comment">/* Write through */</span><br>              bin = next_bin (bin);<br>              bit &lt;&lt;= <span class="hljs-number">1</span>;<br>            &#125;<br><span class="hljs-comment">/*如果不为空，操作与largebin基本一致：取下victim，按照大小决定全部返回还是切割一部分*/</span><br>          <span class="hljs-keyword">else</span><br>            &#123;<br>...<br>            &#125;<br>        &#125;<br><br>    use_top:<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">         If large enough, split off the chunk bordering the end of memory</span><br><span class="hljs-comment">         (held in av-&gt;top). Note that this is in accord with the best-fit</span><br><span class="hljs-comment">         search rule.  In effect, av-&gt;top is treated as larger (and thus</span><br><span class="hljs-comment">         less well fitting) than any other available chunk since it can</span><br><span class="hljs-comment">         be extended to be as large as necessary (up to system</span><br><span class="hljs-comment">         limitations).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         We require that av-&gt;top always exists (i.e., has size &gt;=</span><br><span class="hljs-comment">         MINSIZE) after initialization, so if it would otherwise be</span><br><span class="hljs-comment">         exhausted by current request, it is replenished. (The main</span><br><span class="hljs-comment">         reason for ensuring it exists is that we may need MINSIZE space</span><br><span class="hljs-comment">         to put in fenceposts in sysmalloc.)</span><br><span class="hljs-comment">       */</span><br><span class="hljs-comment">/*最后的尝试：分割top chunk*/</span><br><br>      victim = av-&gt;top; <span class="hljs-comment">//取下top chunk</span><br>      size = chunksize (victim);<br><br>      <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (size) &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) (nb + MINSIZE)) <span class="hljs-comment">//top chunk的大小足够满足用户请求并可以至少留下一个最小的堆块</span><br>        &#123;<br>        <span class="hljs-comment">/*切割*/</span><br>          remainder_size = size - nb;<br>          remainder = chunk_at_offset (victim, nb);<br>          av-&gt;top = remainder;<br>          set_head (victim, nb | PREV_INUSE |<br>                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>          set_head (remainder, remainder_size | PREV_INUSE);<br><br>          check_malloced_chunk (av, victim, nb);<br>          <br>        <span class="hljs-comment">/*返回*/</span><br>        <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>          alloc_perturb (p, bytes);<br>          <span class="hljs-keyword">return</span> p;<br>        &#125;<br><br>      <span class="hljs-comment">/* When we are using atomic ops to free fast chunks we can get</span><br><span class="hljs-comment">         here for all block sizes.  */</span><br><span class="hljs-comment">/*尝试寻找fastbin中可能可以与top chunk合并的堆块，并尝试进行合并。结束后重新进行for(;;)循环，top chunk可能就满足条件了*/</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (atomic_load_relaxed (&amp;av-&gt;have_fastchunks))<br>        &#123;<br>          malloc_consolidate (av);<br>          <span class="hljs-comment">/* restore original bin index */</span><br>          <span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>            idx = smallbin_index (nb);<br>          <span class="hljs-keyword">else</span><br>            idx = largebin_index (nb);<br>        &#125;<br><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">         Otherwise, relay to handle system-dependent cases</span><br><span class="hljs-comment">       */</span><br><span class="hljs-comment">/*所有高速方法均已失效，向系统申请更大内存。*/</span><br>      <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-type">void</span> *p = sysmalloc (nb, av);<br>          <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>            alloc_perturb (p, bytes);<br>          <span class="hljs-keyword">return</span> p;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>关于binmap的细节按下不表。简单来说，就是用一个大小为4的32位整数数组（4*32 &#x3D; 128 ）来表示128个bin中是否为空，即oi中常提到的状态压缩。这避免了低效的线性扫描（例如，借助binmap可以一次性跳过32个连续的空bin）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>malloc寻找空闲内存的大致顺序：</p><pre><code class=" mermaid">flowchart TD;Z[&quot;Tcache(0x20~0x410)&quot;]A[&quot;fastbin(0x20~0x90)&quot;]B[&quot;smallbin(0x20~0x400)&quot;]C[&quot;unsorted bin(&gt;=0xA0)&quot;]D[&quot;largebin(&gt;=0x410)&quot;]E[&quot;top chunk&quot;]F[&quot;System&quot;]Z--&gt;A--&gt;B--&gt;C--&gt;D--&gt;E--&gt;F</code></pre><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><h3 id="secure-checking"><a href="#secure-checking" class="headerlink" title="secure checking"></a>secure checking</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__builtin_expect ((<span class="hljs-type">uintptr_t</span>) p &gt; (<span class="hljs-type">uintptr_t</span>) -size, <span class="hljs-number">0</span>)<br>      || __builtin_expect (misaligned_chunk (p), <span class="hljs-number">0</span>)) <span class="hljs-comment">//防size整数溢出以及chunk地址未对齐</span><br>    malloc_printerr (<span class="hljs-string">&quot;free(): invalid pointer&quot;</span>);<br>  <span class="hljs-comment">/* We know that each chunk is at least MINSIZE bytes in size or a</span><br><span class="hljs-comment">     multiple of MALLOC_ALIGNMENT.  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size))) <span class="hljs-comment">//防止无效size字段 </span><br>    malloc_printerr (<span class="hljs-string">&quot;free(): invalid size&quot;</span>);<br><br>  check_inuse_chunk(av, p); <span class="hljs-comment">//检测chunk p是否在使用中，防double free</span><br></code></pre></td></tr></table></figure><h3 id="tcache-1"><a href="#tcache-1" class="headerlink" title="tcache"></a>tcache</h3><p>首先尝试放入tcache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  &#123;<br>    <span class="hljs-type">size_t</span> tc_idx = csize2tidx (size);<br><br>    <span class="hljs-keyword">if</span> (tcache<br>&amp;&amp; tc_idx &lt; mp_.tcache_bins<br>&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<br>      &#123;<br>tcache_put (p, tc_idx);<br><span class="hljs-keyword">return</span>;<br>      &#125;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="fastbin-1"><a href="#fastbin-1" class="headerlink" title="fastbin"></a>fastbin</h3><p>若不能放入tcache，则尝试放入fastbin。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(size) &lt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(get_max_fast ())  <span class="hljs-comment">//满足fastbin大小，尝试放入fastbin</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> TRIM_FASTBINS</span><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">If TRIM_FASTBINS set, don&#x27;t place chunks</span><br><span class="hljs-comment">bordering top into fastbins</span><br><span class="hljs-comment">      */</span><br>      &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      ) &#123;<br><br>    <span class="hljs-keyword">if</span> (__builtin_expect (chunksize_nomask (chunk_at_offset (p, size))<br>  &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>) <br>|| __builtin_expect (chunksize (chunk_at_offset (p, size))<br>     &gt;= av-&gt;system_mem, <span class="hljs-number">0</span>))  <span class="hljs-comment">//检测堆块伪造</span><br>      &#123;<br><span class="hljs-type">bool</span> fail = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">/* We might not have a lock at this point and concurrent modifications</span><br><span class="hljs-comment">   of system_mem might result in a false positive.  Redo the test after</span><br><span class="hljs-comment">   getting the lock.  */</span><br><span class="hljs-keyword">if</span> (!have_lock)<br>  &#123;<br>    __libc_lock_lock (av-&gt;mutex);<br>    fail = (chunksize_nomask (chunk_at_offset (p, size)) &lt;= <span class="hljs-number">2</span> * SIZE_SZ<br>    || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem);<br>    __libc_lock_unlock (av-&gt;mutex);<br>  &#125;<br><br><span class="hljs-keyword">if</span> (fail)<br>  malloc_printerr (<span class="hljs-string">&quot;free(): invalid next size (fast)&quot;</span>);<br>      &#125;<br><br>    free_perturb (chunk2mem(p), size - <span class="hljs-number">2</span> * SIZE_SZ);<br><br>    atomic_store_relaxed (&amp;av-&gt;have_fastchunks, <span class="hljs-literal">true</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> idx = fastbin_index(size);   <span class="hljs-comment">//求堆块大小在fastbin中对应索引</span><br>    fb = &amp;fastbin (av, idx);  <span class="hljs-comment">//找到对应fastbin链表头</span><br><br>    <span class="hljs-comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span><br>    mchunkptr old = *fb, old2;<br><br>  <span class="hljs-comment">/*单/多线程插入fastbin*/</span><br>    <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)<br>      &#123;<br><span class="hljs-comment">/* Check that the top of the bin is not the record we are going to</span><br><span class="hljs-comment">   add (i.e., double free).  */</span><br><span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>  malloc_printerr (<span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>); <span class="hljs-comment">//防double free</span><br>p-&gt;fd = old; <span class="hljs-comment">//待释放堆块的前驱设置为fastbin链表头</span><br>*fb = p; <span class="hljs-comment">//p为新的链表头</span><br>      &#125;<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">do</span><br>&#123;<br>  <span class="hljs-comment">/* Check that the top of the bin is not the record we are going to</span><br><span class="hljs-comment">     add (i.e., double free).  */</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect (old == p, <span class="hljs-number">0</span>))<br>    malloc_printerr (<span class="hljs-string">&quot;double free or corruption (fasttop)&quot;</span>);<br>  p-&gt;fd = old2 = old;<br>&#125;<br>      <span class="hljs-keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2))<br>     != old2);<br><br>    <span class="hljs-comment">/* Check that size of fastbin chunk at the top is the same as</span><br><span class="hljs-comment">       size of the chunk that we are adding.  We can dereference OLD</span><br><span class="hljs-comment">       only if we have the lock, otherwise it might have already been</span><br><span class="hljs-comment">       allocated again.  */</span><br>    <span class="hljs-keyword">if</span> (have_lock &amp;&amp; old != <span class="hljs-literal">NULL</span><br>&amp;&amp; __builtin_expect (fastbin_index (chunksize (old)) != idx, <span class="hljs-number">0</span>))<br>      malloc_printerr (<span class="hljs-string">&quot;invalid fastbin entry (free)&quot;</span>);<br>  &#125;<br><br></code></pre></td></tr></table></figure><h3 id="unsorted-bin-1"><a href="#unsorted-bin-1" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><p>若chunk超出fastbin范围，则首先与相邻位置的堆块进行合并，然后放入unsorted bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!chunk_is_mmapped(p)) &#123; <span class="hljs-comment">//不是由mmap分配，进入unsorted bin回收环节</span><br><br>    <span class="hljs-comment">/* If we&#x27;re single-threaded, don&#x27;t lock the arena.  */</span><br>    <span class="hljs-keyword">if</span> (SINGLE_THREAD_P)<br>      have_lock = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">if</span> (!have_lock)<br>      __libc_lock_lock (av-&gt;mutex);<br><br>    nextchunk = chunk_at_offset(p, size); <span class="hljs-comment">//取物理相邻的下一个堆块</span><br><br>    <span class="hljs-comment">/* Lightweight tests: check whether the block is already the</span><br><span class="hljs-comment">       top block.  */</span><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (p == av-&gt;top))  <br>      malloc_printerr (<span class="hljs-string">&quot;double free or corruption (top)&quot;</span>); <span class="hljs-comment">//防止top chunk double free</span><br>    <span class="hljs-comment">/* Or whether the next chunk is beyond the boundaries of the arena.  */</span><br>    <span class="hljs-keyword">if</span> (__builtin_expect (contiguous (av)<br>  &amp;&amp; (<span class="hljs-type">char</span> *) nextchunk<br>  &gt;= ((<span class="hljs-type">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="hljs-number">0</span>))<br>malloc_printerr (<span class="hljs-string">&quot;double free or corruption (out)&quot;</span>);  <span class="hljs-comment">//防止nextchunk超出arena范围</span><br>    <span class="hljs-comment">/* Or whether the block is actually not marked used.  */</span><br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))<br>      malloc_printerr (<span class="hljs-string">&quot;double free or corruption (!prev)&quot;</span>); <span class="hljs-comment">//防止待释放堆块double free</span><br><br>    nextsize = chunksize(nextchunk);<br>    <span class="hljs-keyword">if</span> (__builtin_expect (chunksize_nomask (nextchunk) &lt;= <span class="hljs-number">2</span> * SIZE_SZ, <span class="hljs-number">0</span>)<br>|| __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="hljs-number">0</span>))<br>      malloc_printerr (<span class="hljs-string">&quot;free(): invalid next size (normal)&quot;</span>); <span class="hljs-comment">//无效的nextsize，可能存在堆块伪造</span><br><br>    free_perturb (chunk2mem(p), size - <span class="hljs-number">2</span> * SIZE_SZ); <br><br>    <span class="hljs-comment">/* consolidate backward */</span><br>  <span class="hljs-comment">/*如果前一个堆块也处于空闲状态，那么向后合并*/</span><br>    <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>      prevsize = prev_size (p); <span class="hljs-comment">//更新prev_size字段</span><br>      size += prevsize; <span class="hljs-comment">//更新size字段</span><br>      p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize)); <span class="hljs-comment">//更新p指针</span><br>      unlink(av, p, bck, fwd); <span class="hljs-comment">//将堆块从链表中架空</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;<br>      <span class="hljs-comment">/* get and clear inuse bit */</span><br>      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);<br><br>      <span class="hljs-comment">/* consolidate forward */</span><br>      <span class="hljs-comment">/*如果后一个堆块未在使用，那么向前合并*/</span><br>      <span class="hljs-keyword">if</span> (!nextinuse) &#123;<br>unlink(av, nextchunk, bck, fwd); <span class="hljs-comment">//将后一个堆块架空</span><br>size += nextsize; <span class="hljs-comment">//更新size字段</span><br>      &#125; <span class="hljs-keyword">else</span><br>clear_inuse_bit_at_offset(nextchunk, <span class="hljs-number">0</span>); <br><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">Place the chunk in unsorted chunk list. Chunks are</span><br><span class="hljs-comment">not placed into regular bins until after they have</span><br><span class="hljs-comment">been given one chance to be used in malloc.</span><br><span class="hljs-comment">      */</span><br><br>      <span class="hljs-comment">/*将合并好的堆块置入unsorted bin*/</span><br>      bck = unsorted_chunks(av); <span class="hljs-comment">//后继为链表头</span><br>      fwd = bck-&gt;fd; <span class="hljs-comment">//前驱为链表尾</span><br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))<br>malloc_printerr (<span class="hljs-string">&quot;free(): corrupted unsorted chunks&quot;</span>); <span class="hljs-comment">//防止堆块伪造</span><br>      p-&gt;fd = fwd; <span class="hljs-comment">//将p的前驱设为链表尾</span><br>      p-&gt;bk = bck; <span class="hljs-comment">//将p的后继设为链表头</span><br>      <span class="hljs-keyword">if</span> (!in_smallbin_range(size))<br>&#123;<br>  p-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>  p-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>&#125;<br>      bck-&gt;fd = p; <span class="hljs-comment">//更新链表头的fd指针，使其指向p</span><br>      fwd-&gt;bk = p; <span class="hljs-comment">//更新链表尾的bk指针，使其指向p</span><br><br>      set_head(p, size | PREV_INUSE);<br>      set_foot(p, size);<br><br>      check_free_chunk(av, p);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      If the chunk borders the current high end of memory,</span><br><span class="hljs-comment">      consolidate into top</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">/*如果其nextchunk就是top chunk，与top chunk进行合并*/</span><br>    <span class="hljs-keyword">else</span> &#123;<br>      size += nextsize;<br>      set_head(p, size | PREV_INUSE);<br>      av-&gt;top = p;<br>      check_chunk(av, p);<br>    &#125;<br><br>  <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      If freeing a large space, consolidate possibly-surrounding</span><br><span class="hljs-comment">      chunks. Then, if the total unused topmost memory exceeds trim</span><br><span class="hljs-comment">      threshold, ask malloc_trim to reduce top.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      Unless max_fast is 0, we don&#x27;t know if there are fastbins</span><br><span class="hljs-comment">      bordering top, so we cannot tell for sure whether threshold</span><br><span class="hljs-comment">      has been reached unless fastbins are consolidated.  But we</span><br><span class="hljs-comment">      don&#x27;t want to consolidate on each free.  As a compromise,</span><br><span class="hljs-comment">      consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD</span><br><span class="hljs-comment">      is reached.</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">/*释放足够大，可能会触发强制整理，systrim等机制*/</span><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;<br>      <span class="hljs-keyword">if</span> (atomic_load_relaxed (&amp;av-&gt;have_fastchunks))<br>malloc_consolidate(av);<br><br>      <span class="hljs-keyword">if</span> (av == &amp;main_arena) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(chunksize(av-&gt;top)) &gt;=<br>    (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(mp_.trim_threshold))<br>  systrim(mp_.top_pad, av);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* Always try heap_trim(), even if the top chunk is not</span><br><span class="hljs-comment">   large, because the corresponding heap might go away.  */</span><br>heap_info *heap = heap_for_ptr(top(av));<br><br>assert(heap-&gt;ar_ptr == av);<br>heap_trim(heap, mp_.top_pad);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!have_lock)<br>      __libc_lock_unlock (av-&gt;mutex);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="munmap"><a href="#munmap" class="headerlink" title="munmap"></a>munmap</h3><p>如果堆块是由mmap分配的，那么直接munmap归还系统。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> &#123;<br>  munmap_chunk (p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>free寻找放置堆块位置的大致顺序：</p><pre><code class=" mermaid">graph TDA[&quot;tcache&quot;]--&gt;B[&quot;fastbin&quot;]--&gt;C[&quot;unsorted bin&quot;]--&gt;D[&quot;munmap&quot;]</code></pre><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>以上是glibc-2.27的malloc.c中最核心的两个函数的宏观分析。其实这还不够，有一些需要理解的重要函数如unlink, malloc_consolidate还待细究。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Conda</title>
    <link href="/2025/09/15/Conda/"/>
    <url>/2025/09/15/Conda/</url>
    
    <content type="html"><![CDATA[<h2 id="创建新环境"><a href="#创建新环境" class="headerlink" title="创建新环境"></a>创建新环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create --name myenv python=x.xx<br></code></pre></td></tr></table></figure><h2 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> activate myenv<br></code></pre></td></tr></table></figure><h2 id="结束环境"><a href="#结束环境" class="headerlink" title="结束环境"></a>结束环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> deactivate<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac配置记录</title>
    <link href="/2025/08/23/Mac%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/08/23/Mac%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>记录一点配置Mac的相关博客&#x2F;命令&#x2F;……</p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>ClashXPro可以正常工作<br>Clash-verge-rev最新版出于神秘原因内核通信错误。<br>临时在终端配置代理：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">alias</span> proxy=<span class="hljs-string">&quot; export http_proxy=socks5://127.0.0.1:7890; </span><br><span class="hljs-string">export https_proxy=socks5://127.0.0.1:7890; </span><br><span class="hljs-string">export all_proxy=socks5://127.0.0.1:7890; </span><br><span class="hljs-string">export no_proxy=socks5://127.0.0.1:7890; </span><br><span class="hljs-string">export HTTP_PROXY=socks5://127.0.0.1:7890; </span><br><span class="hljs-string">export HTTPS_PROXY=socks5://127.0.0.1:7890; </span><br><span class="hljs-string">export ALL_PROXY=socks5://127.0.0.1:7890; </span><br><span class="hljs-string">export NO_PROXY=socks5://127.0.0.1:7890;&quot;</span> <br><span class="hljs-built_in">alias</span> unproxy=<span class="hljs-string">&quot; unset http_proxy; </span><br><span class="hljs-string">unset https_proxy; </span><br><span class="hljs-string">unset all_proxy; </span><br><span class="hljs-string">unset no_proxy; </span><br><span class="hljs-string">unset HTTP_PROXY; </span><br><span class="hljs-string">unset HTTPS_PROXY; </span><br><span class="hljs-string">unset ALL_PROXY; </span><br><span class="hljs-string">unset NO_PROXY&quot;</span><br></code></pre></td></tr></table></figure><p>oh-my-zsh装好后可以写入<code>.zshrc</code></p><h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>最后还要执行一些命令配置环境，按照引导复制粘贴即可。</p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p>需要将系统升级到支持最新版本Xcode，在Appstore下载，不然就要到苹果开发者官网下载老版本，但是似乎需要注册成为会员才行。<br>安装命令行工具：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">xcode-select --install<br></code></pre></td></tr></table></figure><p>如果提前下载了brew那xcode-select应该会同步安装好。<br>如果没代理可能比较慢。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>Xcode自带git，但还是安装新的。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">brew install git<br></code></pre></td></tr></table></figure><p>然后设置username email ssh等。</p><h2 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h2><p>有Xcode这个配置就比较简单，配一下code runner的json就行。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code-runner.executorMap&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><br><span class="hljs-attr">&quot;javascript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;zig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zig run&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;objective-c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;python&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python -u&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;perl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;perl6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl6&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;ruby&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruby&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go run&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;lua&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lua&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;groovy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;groovy&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;powershell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell -ExecutionPolicy ByPass -File&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;bat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmd /c&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;shellscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bash&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;fsharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsi&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;csharp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scriptcs&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;vbscript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cscript //Nologo&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ts-node&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;coffeescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coffee&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;scala&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scala&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;swift&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;julia&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;julia&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;crystal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;crystal&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;ocaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;r&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rscript&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;applescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;osascript&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;clojure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lein exec&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;haxe&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;rust&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;racket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;racket&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;scheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;csi -script&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;ahk&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autohotkey&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;autoit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;autoit3&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;dart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dart&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;pascal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;haskell&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;runghc&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;nim&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nim compile --verbosity:0 --hints:off --run&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;lisp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sbcl --script&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;kit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kitc --run&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;v&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v run&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sass --style expanded&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss --style expanded&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;FortranFreeForm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;fortran-modern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;fortran_fixed-form&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;fortran&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;sml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; sml $fileName&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;mojo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mojo run&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;erlang&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;escript&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;spwn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;spwn build&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;pkl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-attr">&quot;gleam&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gleam run -m $fileNameWithoutExt&quot;</span><br><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;code-runner.runInTerminal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="C-C"><a href="#C-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h3><p>Xcode已经装好gcc和clang，直接在终端里跑就行了。有一点比较好笑的是，由于mac的命令行用的是zsh，而我一开始将测试文件夹名称设为了C&amp;C++，导致终端以“&amp;”字符将命令分开了，一直跑不起来。这个故事警示我们最好不要在命名文件&#x2F;文件夹时使用特殊字符。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>从官网下载对应python，为python3&#x2F;pip3设置别名即可。</p><h2 id="Java-IntelliJ-IDEA"><a href="#Java-IntelliJ-IDEA" class="headerlink" title="Java &amp; IntelliJ IDEA"></a>Java &amp; IntelliJ IDEA</h2><p>Java安装参考博客：<a href="https://blog.gslin.org/archives/2022/12/28/11009/mac-%E4%B8%8A%E7%94%A8-homebrew-%E5%AE%89%E8%A3%9D-java-%E7%9A%84%E6%96%B9%E5%BC%8F/"># Mac 上用 Homebrew 安裝 Java 的方式</a><br>可以通过brew直接安装：<code>brew install temurin</code>然后<code>export JAVA_HOME=&quot;$(/usr/libexec/java_home)&quot;</code><br>IntelliJ IDEA安装即可。</p><h2 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA Pro"></a>IDA Pro</h2><p><a href="https://bbs.kanxue.com/thread-285999.htm">https://bbs.kanxue.com/thread-285999.htm</a><br>Mac食用。</p><h2 id="Ubuntu-pwn"><a href="#Ubuntu-pwn" class="headerlink" title="Ubuntu &amp; pwn"></a>Ubuntu &amp; pwn</h2><p><a href="https://hamor.top/posts/tech/mac-m%E8%8A%AF%E7%89%87pwn%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#%e4%ba%8cutm%e5%ae%89%e8%a3%85ubuntu">https://hamor.top/posts/tech/mac-m%E8%8A%AF%E7%89%87pwn%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/#%e4%ba%8cutm%e5%ae%89%e8%a3%85ubuntu</a><br>通过ssh连接方法：服务器上执行<code>sudo systemctl status ssh</code>，随后<code>ifconfig</code>查看inet地址。<br>主机上<code>ssh username@ip</code>，输入密码即可。<br>最好在虚拟机中设置代理。<br>与主机共享文件夹问题：<br><a href="https://juejin.cn/post/7349360417092321306#heading-6">https://juejin.cn/post/7349360417092321306#heading-6</a></p><p>桥接模式似乎是有问题，经常ssh连一半断掉，用共享网络。</p><h2 id="Android-emulator"><a href="#Android-emulator" class="headerlink" title="Android emulator"></a>Android emulator</h2><p><a href="https://www.bluestacks.com/mac">https://www.bluestacks.com/mac</a></p>]]></content>
    
    
    <categories>
      
      <category>Miscellaneous things</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA Skills</title>
    <link href="/2025/08/17/About-Chinese-Character-in-IDA-Pro/"/>
    <url>/2025/08/17/About-Chinese-Character-in-IDA-Pro/</url>
    
    <content type="html"><![CDATA[<p>一些IDA相关技巧的帖子链接</p><ul><li><p>中文显示问题：<a href="https://www.52pojie.cn/thread-648679-1-1.html">https://www.52pojie.cn/thread-648679-1-1.html</a></p></li><li><p>简单IDA Python：<a href="https://www.cnblogs.com/iBinary/p/14642662.html">https://www.cnblogs.com/iBinary/p/14642662.html</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Miscellaneous things</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDA Skills</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A casual notes</title>
    <link href="/2025/08/05/CS61A-casual-notes/"/>
    <url>/2025/08/05/CS61A-casual-notes/</url>
    
    <content type="html"><![CDATA[<h2 id="Welcome-Function"><a href="#Welcome-Function" class="headerlink" title="Welcome&amp;Function"></a>Welcome&amp;Function</h2><p>loop <code>for</code> in python, do not forget to add <code>range </code> .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a,b): <span class="hljs-comment">#a included, b excluded (actually [a,b+1])</span><br></code></pre></td></tr></table></figure><p>reverse string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="Control-Higher-order-function"><a href="#Control-Higher-order-function" class="headerlink" title="Control&amp;Higher order function"></a>Control&amp;Higher order function</h2><p>to check a function’s docstring:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(func)<br></code></pre></td></tr></table></figure><p>and type q to exit.</p><p> lambda expression:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[expression name]=<span class="hljs-keyword">lambda</span> [parameters]:[value] <br></code></pre></td></tr></table></figure><p>In python, functions can also be parameters of other functions.</p><h3 id="Hog"><a href="#Hog" class="headerlink" title="Hog"></a>Hog</h3><p>example of <code>assert</code> checkers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(num_rolls) == <span class="hljs-built_in">int</span>, <span class="hljs-string">&#x27;num_rolls must be an integer.&#x27;</span><br><span class="hljs-keyword">assert</span> num_rolls &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Must roll at least once.&#x27;</span><br></code></pre></td></tr></table></figure><p>*args syntax is used for the function that has arbitrary numbers of args.</p><p>Ex: in problem 8:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_averaged</span>(<span class="hljs-params">original_function, times_called=<span class="hljs-number">1000</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a function that returns the average value of ORIGINAL_FUNCTION</span><br><span class="hljs-string">    called TIMES_CALLED times.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    To implement this function, you will have to use *args syntax.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; dice = make_test_dice(4, 2, 5, 1)</span><br><span class="hljs-string">    &gt;&gt;&gt; averaged_dice = make_averaged(roll_dice, 40)</span><br><span class="hljs-string">    &gt;&gt;&gt; averaged_dice(1, dice)  # The avg of 10 4&#x27;s, 10 2&#x27;s, 10 5&#x27;s, and 10 1&#x27;s</span><br><span class="hljs-string">    3.0</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># BEGIN PROBLEM 8</span><br>   <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*args</span>):<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(times_called):<br>            <span class="hljs-built_in">sum</span> += original_function(*args)<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>/times_called<br>    <br>    <span class="hljs-keyword">return</span> func<br></code></pre></td></tr></table></figure><p> We don’t precisely know how many parameters the <code>original_function</code> needs, so we use <code>*args</code>.</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>The expression is calculated from left to right. If the logical value of the left side of or is true, all expressions after or (whether it is followed by and or, etc.) are short-circuited, and the expression on the left side of or is directly output; if the logical value of the expression on the left side of or is false, the expression after or is output, regardless of whether the following expression is true or false.<br>The expression is calculated from left to right. If the logical value of the left side of and is false, all expressions after and are short-circuited until or appears, and the expression on the left side of and is output to the left side of or to participate in the next logical operation.<br>If the left side of or is false, or the left side of and is true, short-circuit logic cannot be used.</p><p>The types that can be considered False are: None, 0 of any numeric type, empty string ‘ ‘, empty tuple (), empty list [], empty dictionary {}</p><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p>The source code of hw03 shows a way to check or ban specific key words&#x2F;structures:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> construct_check <span class="hljs-keyword">import</span> check<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># ban all assignment statements</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>check(HW_SOURCE_FILE, <span class="hljs-string">&#x27;num_eights&#x27;</span>,<br><span class="hljs-meta">... </span>      [<span class="hljs-string">&#x27;Assign&#x27;</span>, <span class="hljs-string">&#x27;AnnAssign&#x27;</span>, <span class="hljs-string">&#x27;AugAssign&#x27;</span>, <span class="hljs-string">&#x27;NamedExpr&#x27;</span>, <span class="hljs-string">&#x27;For&#x27;</span>, <span class="hljs-string">&#x27;While&#x27;</span>])<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="Cats"><a href="#Cats" class="headerlink" title="Cats"></a>Cats</h3><p>decorator in python (<code>@</code>):<br>Q: What is a decorator in Python?<br>Choose the number of the correct choice:<br>0) A way to loop through an iterable</p><ol><li>A type of design pattern</li><li>A method for declaring class properties</li><li>A function that takes another function as an input and returns a new function that extends or modifies the behavior of the original function<br>? 3</li></ol><p>Ex:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>def my_decorator(func):</span><br><span class="hljs-string"><span class="hljs-meta">... </span>  def wrapper():</span><br><span class="hljs-string"><span class="hljs-meta">... </span>      print(&quot;Say Hello&quot;)</span><br><span class="hljs-string"><span class="hljs-meta">... </span>      func()</span><br><span class="hljs-string"><span class="hljs-meta">... </span>      print(&quot;Say Goodbye&quot;)</span><br><span class="hljs-string"><span class="hljs-meta">... </span>  return wrapper</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>@my_decorator</span><br><span class="hljs-string"><span class="hljs-meta">... </span>def say_hello():</span><br><span class="hljs-string"><span class="hljs-meta">... </span>    print(&quot;Hello World&quot;)</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>say_hello()</span><br><span class="hljs-string">(line 1)? Say Hello</span><br><span class="hljs-string">(line 2)? Hello World</span><br><span class="hljs-string">(line 3)? Say Goodbye</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>def magic_decorator(func):</span><br><span class="hljs-string"><span class="hljs-meta">... </span>  def wrapper(x):</span><br><span class="hljs-string"><span class="hljs-meta">... </span>    return func(x * 2)</span><br><span class="hljs-string"><span class="hljs-meta">... </span>  return wrapper</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>@magic_decorator</span><br><span class="hljs-string"><span class="hljs-meta">... </span>def myfunc(x):</span><br><span class="hljs-string"><span class="hljs-meta">... </span>  return x * 3</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>print(myfunc(4))</span><br><span class="hljs-string">? 24</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>to check whether a function is recursive:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>from cats import furry_fixes, autocorrect</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>import tests.construct_check as test</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span># Check that the recursion stops when the limit is reached</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>import trace, io</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>from contextlib import redirect_stdout</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>with io.StringIO() as buf, redirect_stdout(buf):</span><br><span class="hljs-string"><span class="hljs-meta">... </span>    trace.Trace(trace=True).runfunc(furry_fixes, &quot;someaweqwertyuio&quot;, &quot;awesomeasdfghjkl&quot;, 3)     </span><br><span class="hljs-string"><span class="hljs-meta">... </span>    output = buf.getvalue()</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>len([line for line in output.split(&#x27;\n&#x27;) if &#x27;funcname&#x27; in line]) &lt; 12</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>str slice:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sequence[start:stop:step]<br></code></pre></td></tr></table></figure><p>question 07: Levenshtein distance</p><p><a href="https://zhuanlan.zhihu.com/p/507830576">https://zhuanlan.zhihu.com/p/507830576</a></p><p><a href="https://www.youtube.com/watch?v=MiqoA-yF-0M">https://www.youtube.com/watch?v=MiqoA-yF-0M</a></p><p>The dp relation:<br><img src="/2025/08/05/CS61A-casual-notes/873B478030456F91336CB440B1891687.jpg" alt="dp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">minimum_mewtations</span>(<span class="hljs-params">typed, source, limit</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;A diff function for autocorrect that computes the edit distance from TYPED to SOURCE.</span><br><span class="hljs-string">    This function takes in a string TYPED, a string SOURCE, and a number LIMIT.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">        typed: a starting word</span><br><span class="hljs-string">        source: a string representing a desired goal word</span><br><span class="hljs-string">        limit: a number representing an upper bound on the number of edits</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; big_limit = 10</span><br><span class="hljs-string">    &gt;&gt;&gt; minimum_mewtations(&quot;cats&quot;, &quot;scat&quot;, big_limit)       # cats -&gt; scats -&gt; scat</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &gt;&gt;&gt; minimum_mewtations(&quot;purng&quot;, &quot;purring&quot;, big_limit)   # purng -&gt; purrng -&gt; purring</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &gt;&gt;&gt; minimum_mewtations(&quot;ckiteus&quot;, &quot;kittens&quot;, big_limit) # ckiteus -&gt; kiteus -&gt; kitteus -&gt; kittens</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> limit &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> typed == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(source)<br>    <span class="hljs-keyword">if</span> source == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(typed)<br>    <br>    <span class="hljs-keyword">if</span> typed[<span class="hljs-built_in">len</span>(typed)-<span class="hljs-number">1</span>] == source[<span class="hljs-built_in">len</span>(source)-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">return</span> minimum_mewtations(typed[:-<span class="hljs-number">1</span>], source[:-<span class="hljs-number">1</span>], limit )<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-built_in">min</span>(minimum_mewtations(typed[:-<span class="hljs-number">1</span>], source[:-<span class="hljs-number">1</span>], limit - <span class="hljs-number">1</span>), minimum_mewtations(typed[:-<span class="hljs-number">1</span>], source, limit - <span class="hljs-number">1</span>), minimum_mewtations(typed, source[:-<span class="hljs-number">1</span>], limit - <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="Sequence-List-Data-Abstract-Tree"><a href="#Sequence-List-Data-Abstract-Tree" class="headerlink" title="Sequence&#x2F;List&amp;Data Abstract (Tree)"></a>Sequence&#x2F;List&amp;Data Abstract (Tree)</h2><p>To show a dictionary’s keys and values:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dic.keys()<br>dic.value()<br></code></pre></td></tr></table></figure><p>To check a variable’s type:<code>isinstance(&lt;varname&gt;, &lt;vartype&gt;)</code> or <code>type(&lt;varname&gt;) == &lt;vartype&gt;</code></p><p>tree:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tree</span>(<span class="hljs-params">label, branches=[]</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Construct a tree with the given label value and a list of branches.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches:<br>        <span class="hljs-keyword">assert</span> is_tree(branch), <span class="hljs-string">&#x27;branches must be trees&#x27;</span><br>    <span class="hljs-keyword">return</span> [label] + <span class="hljs-built_in">list</span>(branches)<br></code></pre></td></tr></table></figure><h2 id="Iterator-Generator-Mutability"><a href="#Iterator-Generator-Mutability" class="headerlink" title="Iterator, Generator, Mutability"></a>Iterator, Generator, Mutability</h2><p>use <code>it = iter(x)</code> to declare an iterator for an iterable (x)<br>use <code>next(it)</code> to iterate</p><p>generator and yield statement:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">letters_generator</span>():<br>        current = <span class="hljs-string">&#x27;a&#x27;</span><br>        <span class="hljs-keyword">while</span> current &lt;= <span class="hljs-string">&#x27;d&#x27;</span>:<br>            <span class="hljs-keyword">yield</span> current<br>            current = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(current)+<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> letters_generator():<br>        <span class="hljs-built_in">print</span>(letter)<br><br>a<br>b<br>c<br>d<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>letters = letters_generator()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(letters)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;generator&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>letters.__next__()<br><span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>letters.__next__()<br><span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>letters.__next__()<br><span class="hljs-string">&#x27;c&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>letters.__next__()<br><span class="hljs-string">&#x27;d&#x27;</span><br></code></pre></td></tr></table></figure><p>The first time <strong>next</strong> is called, the program executes statements from the body of the letters_generator function until it encounters the yield statement. Then, it pauses and returns the value of current. yield statements do not destroy the newly created environment, they preserve it for later. When <strong>next</strong> is called again, execution resumes where it left off. The values of current and of any other bound names in the scope of letters_generator are preserved across subsequent calls to <strong>next</strong>.</p><p>The map function, for example, takes a function and an iterable. It returns an iterator over the result of applying the function argument to each element in the iterable argument.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>caps = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x.upper(), b_to_k)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(caps)<br><span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(caps)<br><span class="hljs-string">&#x27;C&#x27;</span><br></code></pre></td></tr></table></figure><p>zip:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[x + y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>yield from in a recursive situation<br>example 1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">stair_ways</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Yield all the ways to climb a set of n stairs taking</span><br><span class="hljs-string">    1 or 2 steps at a time.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; list(stair_ways(0))</span><br><span class="hljs-string">    [[]]</span><br><span class="hljs-string">    &gt;&gt;&gt; s_w = stair_ways(4)</span><br><span class="hljs-string">    &gt;&gt;&gt; sorted([next(s_w) for _ in range(5)])</span><br><span class="hljs-string">    [[1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2]]</span><br><span class="hljs-string">    &gt;&gt;&gt; list(s_w) # Ensure you&#x27;re not yielding extra</span><br><span class="hljs-string">    []</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recursive_stair_way</span>(<span class="hljs-params">m, way</span>):<br>        <span class="hljs-keyword">if</span> m == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">yield</span> way<br>        <span class="hljs-keyword">elif</span> m &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>             <br>              <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> recursive_stair_way(m-i, way+[i])<br><br>    <span class="hljs-keyword">return</span> recursive_stair_way(n, [])<br></code></pre></td></tr></table></figure><p>example 2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yield_paths</span>(<span class="hljs-params">t, value</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Yields all possible paths from the root of t to a node with the label</span><br><span class="hljs-string">    value as a list.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t1 = tree(1, [tree(2, [tree(3), tree(4, [tree(6)]), tree(5)]), tree(5)])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">          6</span><br><span class="hljs-string">        5</span><br><span class="hljs-string">      5</span><br><span class="hljs-string">    &gt;&gt;&gt; next(yield_paths(t1, 6))</span><br><span class="hljs-string">    [1, 2, 4, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; path_to_5 = yield_paths(t1, 5)</span><br><span class="hljs-string">    &gt;&gt;&gt; sorted(list(path_to_5))</span><br><span class="hljs-string">    [[1, 2, 5], [1, 5]]</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t2 = tree(0, [tree(2, [t1])])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t2)</span><br><span class="hljs-string">    0</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        1</span><br><span class="hljs-string">          2</span><br><span class="hljs-string">            3</span><br><span class="hljs-string">            4</span><br><span class="hljs-string">              6</span><br><span class="hljs-string">            5</span><br><span class="hljs-string">          5</span><br><span class="hljs-string">    &gt;&gt;&gt; path_to_2 = yield_paths(t2, 2)</span><br><span class="hljs-string">    &gt;&gt;&gt; sorted(list(path_to_2))</span><br><span class="hljs-string">    [[0, 2], [0, 2, 1, 2]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> label(t) == value:<br>        <span class="hljs-keyword">yield</span> [value]<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> branches(t):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> yield_paths(b, value):<br>            <span class="hljs-keyword">yield</span> [label(t)] + k<br><br></code></pre></td></tr></table></figure><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><h3 id="Ants"><a href="#Ants" class="headerlink" title="Ants"></a>Ants</h3><p>If a variable is defined outside all of the methods in a class, then it’s called a “class attribute” of this class.<br>Like the variable <code>next_id</code> and <code>damage</code> in the following example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Insect</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;An Insect, the base class of Ant and Bee, has health and a Place.&quot;&quot;&quot;</span><br><br>    next_id = <span class="hljs-number">0</span>  <span class="hljs-comment"># Every insect gets a unique id number</span><br>    damage = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># ADD CLASS ATTRIBUTES HERE</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, health, place=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Create an Insect with a health amount and a starting PLACE.&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.health = health<br>        <span class="hljs-variable language_">self</span>.place = place<br><br>        <span class="hljs-comment"># assign a unique ID to every insect</span><br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">id</span> = Insect.next_id<br>        Insect.next_id += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Inheritance: <code>class B(A)</code> means that class B is derived from class A.</p><p>To call a parent method, use <code>super()</code>.</p><p>magic method <code>__str__</code> is for user, <code>__repr__</code> is for python interpreter</p><p>about the method <code>max</code> and key:  </p><p><a href="https://deepinout.com/python/python-qa/41_python_python_max_function_using_key_and_lambda_expression.html">max-key</a></p><h2 id="Scheme-Functional-Programming"><a href="#Scheme-Functional-Programming" class="headerlink" title="Scheme(Functional Programming)"></a>Scheme(Functional Programming)</h2><p class="note note-danger">Try to code in Scheme manually is just the hell of indentation and parentheses matching...</p><p>Concept:Our object of study, a subset of the Scheme language, employs a very similar model of computation to Python’s, but uses only expressions (no statements), specializes in symbolic computation, and employs only immutable values.</p><p>some special forms in scheme:<br>if:<code>(if &lt;predicate&gt; &lt;consequent&gt; &lt;alternative&gt;)</code><br>cond:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">cond</span></span><br>    (<span class="hljs-name">&lt;p1&gt;</span> &lt;e1&gt;)<br>    (<span class="hljs-name">&lt;p2&gt;</span> &lt;e2&gt;)<br>    ...<br>    (<span class="hljs-name">&lt;pn&gt;</span> &lt;en&gt;)<br>    (<span class="hljs-name"><span class="hljs-built_in">else</span></span> &lt;else-expression&gt;))<br></code></pre></td></tr></table></figure><p>define:<code>(define (&lt;name&gt; &lt;formal parameters&gt;) &lt;body&gt;)</code><br>lambda:<code>(lambda (&lt;formal-parameters&gt;) &lt;body&gt;)</code></p><p>compound values(use built-in function <code>cons</code>):</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> x (<span class="hljs-name"><span class="hljs-built_in">cons</span></span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>))<br>x<br>(<span class="hljs-name">1</span> . <span class="hljs-number">2</span>)<br><br>(<span class="hljs-name"><span class="hljs-built_in">car</span></span> x)<br><span class="hljs-number">1</span><br>(<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> x)<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>key words <code>cons</code> and <code>list</code> can be used to create link table.<br>Whether a list is empty can be determined using the primitive <code>null?</code> predicate.</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">length</span></span> items)<br>  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">null?</span></span> items)<br>      <span class="hljs-number">0</span><br>      (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-built_in">length</span></span> (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> items)))))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">getitem</span> items n)<br>  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> n <span class="hljs-number">0</span>)<br>      (<span class="hljs-name"><span class="hljs-built_in">car</span></span> items)<br>      (<span class="hljs-name">getitem</span> (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> items) (<span class="hljs-name"><span class="hljs-built_in">-</span></span> n <span class="hljs-number">1</span>))))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> squares (<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">16</span> <span class="hljs-number">25</span>))<br></code></pre></td></tr></table></figure><p>symbolic data:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> a <span class="hljs-number">1</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> b <span class="hljs-number">2</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">list</span></span> a b)<br>(<span class="hljs-name">1</span> <span class="hljs-number">2</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-symbol">&#x27;a</span> <span class="hljs-symbol">&#x27;b</span>)<br>(<span class="hljs-name">a</span> b)<br>(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-symbol">&#x27;a</span> b)<br>(<span class="hljs-name">a</span> <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>In Scheme, any expression that is not evaluated(with the prefix operator <code>&#39;</code>) is said to be <em>quoted</em>.</p><p><code>no-repeats</code> in hw08:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">no-repeats</span> s) <br>(<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">null?</span></span> s)<br>nil<br>(<span class="hljs-name"><span class="hljs-built_in">cons</span></span> (<span class="hljs-name"><span class="hljs-built_in">car</span></span> s) (<span class="hljs-name">no-repeats</span> (<span class="hljs-name">filter</span> (<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> (x) (<span class="hljs-name"><span class="hljs-built_in">not</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> x (<span class="hljs-name"><span class="hljs-built_in">car</span></span> s))) ) (<span class="hljs-name"><span class="hljs-built_in">cdr</span></span> s) ) ))<br>)<br>)<br><br></code></pre></td></tr></table></figure><h2 id="Scheme-Interpreter"><a href="#Scheme-Interpreter" class="headerlink" title="Scheme Interpreter"></a>Scheme Interpreter</h2><p>给我吓出母语了，美国人怎么这么坏。<br>这proj红豆泥抽象，先把PROBLEM的空填了，有空再详细研究吧，不然CS61A拖太长了。</p><h2 id="Higher-order-abstract-Scheme"><a href="#Higher-order-abstract-Scheme" class="headerlink" title="Higher-order abstract(Scheme)"></a>Higher-order abstract(Scheme)</h2><p>use  `  to create literal expression which can be unquoted by <code>,</code><br>use <code>define-macro</code> to define macro like <code>#define</code> in c</p><p>examples in lab11:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">if-program</span> condition if-true if-false)<br>`(if ,condition ,if-true ,if-false)<br>)<br><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">square</span> n) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> n n))<br><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">pow-expr</span> base exp) <br>(<span class="hljs-name"><span class="hljs-built_in">cond</span></span> ((<span class="hljs-name"><span class="hljs-built_in">=</span></span> <span class="hljs-number">0</span> exp) <span class="hljs-number">1</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">else</span></span> (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">even?</span></span> exp)<br>`(square ,(pow-expr base (/ exp <span class="hljs-number">2</span>)))<br>`(* ,base ,(pow-expr base (- exp <span class="hljs-number">1</span>)))<br>))<br>)<br>)<br><br>(<span class="hljs-name">define-macro</span> (<span class="hljs-name">repeat</span> n expr)<br>  `(repeated-call ,n (lambda() ,expr)))<br><br><span class="hljs-comment">; Call zero-argument procedure f n times and return the final result.</span><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">repeated-call</span> n f)<br>  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> n <span class="hljs-number">1</span>)<br>      (<span class="hljs-name">f</span>)<br>      (<span class="hljs-name"><span class="hljs-built_in">begin</span></span> (<span class="hljs-name">f</span>) (<span class="hljs-name">repeated-call</span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> n <span class="hljs-number">1</span>) f) )))<br></code></pre></td></tr></table></figure><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>difference between “declarative(sql)” and “imperative(Python &amp; Scheme)”: SQL focuses on the <strong>result</strong>, while Python and Scheme focus on the <strong>process</strong></p><h3 id="SQL-syntax"><a href="#SQL-syntax" class="headerlink" title="SQL syntax:"></a>SQL syntax:</h3><p><code>SELECT</code> includes a comma-separated list of column description.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [expression] <span class="hljs-keyword">AS</span> [name], [expression] <span class="hljs-keyword">AS</span> [name] <span class="hljs-comment">--SELECT [columns] </span><br><span class="hljs-keyword">SELECT</span> [columns] <span class="hljs-keyword">FROM</span> [<span class="hljs-keyword">table</span>] <span class="hljs-keyword">WHERE</span> [<span class="hljs-keyword">condition</span>] <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> [<span class="hljs-keyword">order</span>];<br></code></pre></td></tr></table></figure><p>Selecting literals creates new tables.</p><p>Arithmetic example:<br><img src="/2025/08/05/CS61A-casual-notes/image.png" alt="exp of ari"></p><p><code>JOIN</code> or comma is used to join two tables.<br><img src="/2025/08/05/CS61A-casual-notes/image-1.png" alt="join"><br>what happens when <code>JOIN</code>:<br><img src="/2025/08/05/CS61A-casual-notes/image-2.png" alt="join detail"><br>Combos of rows.<br>Implicit syntax: comma or <code>JOIN</code><br>Explicit syntax: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FROM</span> [<span class="hljs-keyword">table</span>] <span class="hljs-keyword">JOIN</span><span class="hljs-operator">/</span>comma(,) [<span class="hljs-keyword">table</span>] <span class="hljs-keyword">ON</span> [conditions] <br></code></pre></td></tr></table></figure><p>What if the tables share some column names?<br>Use Aliases or Dot Expressions to distinguish them<br>example from lab12:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> sharing <span class="hljs-keyword">AS</span><br>  <span class="hljs-keyword">SELECT</span> a.course, <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> a.hall) <span class="hljs-keyword">from</span> finals <span class="hljs-keyword">as</span> a, finals <span class="hljs-keyword">as</span> b <span class="hljs-keyword">where</span> a.hall<span class="hljs-operator">=</span>b.hall <span class="hljs-keyword">and</span> a.course <span class="hljs-operator">&lt;&gt;</span> b.course <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a.course;<br></code></pre></td></tr></table></figure><p>String expressions: use <code>||</code> to combine the strings</p><p>Aggregate function and group-by example from hw10:<br>We want to create a table that contains the height range (defined as the difference between maximum and minimum height) of all dogs that share a fur type. However, we’ll only consider fur types where each dog with that fur type is within 30% of the average height of all dogs with that fur type; we call this the low variance criterion.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> fur, <span class="hljs-built_in">max</span>(height)<span class="hljs-operator">-</span><span class="hljs-built_in">min</span>(height) <span class="hljs-keyword">from</span> dogs <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> fur <span class="hljs-keyword">having</span> <span class="hljs-built_in">min</span>(height)<span class="hljs-operator">&gt;=</span><span class="hljs-number">0.7</span><span class="hljs-operator">*</span><span class="hljs-built_in">avg</span>(height) <span class="hljs-keyword">and</span> <span class="hljs-built_in">max</span>(height)<span class="hljs-operator">&lt;=</span><span class="hljs-number">1.3</span><span class="hljs-operator">*</span><span class="hljs-built_in">avg</span>(height);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming and Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>New Pwn</title>
    <link href="/2025/07/23/New-Pwn/"/>
    <url>/2025/07/23/New-Pwn/</url>
    
    <content type="html"><![CDATA[<p>年初随便写的+搬的一点东西，贴在这里。部分图片来自星盟安全团队的pwn教程。</p><h2 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h2><p>Linux用文件头识别文件而非后缀名。</p><p>文件存在磁盘中，运行时载入内存。</p><p>解释型语言不需要编译出可执行文件，用解释器解释后交给CPU执行。</p><p>printf(“%p”,xxx)打印地址。</p><p><strong>c compile简要过程</strong></p><pre><code class=" mermaid">graph LRA[&quot;test.c(src)&quot;]B[&quot;test.s(asm)&quot;]C[&quot;test.o(obj)&quot;]D[&quot;a.out&quot;]A--编译--&gt;B--汇编--&gt;C--链接--&gt;D</code></pre><p><strong>可执行文件</strong></p><p>linux使用ll查看权限:-rwx</p><p>chmod提权 </p><p>Windows : PE:</p><ul><li>可执行程序.exe</li><li>动态链接库.dll</li><li>静态链接库.lib</li></ul><p>Linux: &#x3D;&#x3D;ELF&#x3D;&#x3D;:</p><ul><li>可执行程序.out</li><li>动态链接库.so</li><li>静态链接库.a</li></ul><p><strong>ELF</strong>结构</p><pre><code class=" mermaid">graph LRA[&quot;test.elf&quot;]B[&quot;header(1/2)&quot;]C[&quot;sections&quot;]D[&quot;header(2/2)&quot;]E[&quot;ELF header(ELF文件头总结构)&quot;]F[&quot;Program Header table(程序头表/段表)&quot;]G[&quot;Code&quot;]H[&quot;Data&quot;]I[&quot;Section&#x27;s names&quot;]J[&quot;Section Header Table(节头表)&quot;]A--&gt;B &amp; C &amp; DB--&gt;E &amp; FC--&gt;G &amp; H &amp; ID--&gt;J</code></pre><p><strong>磁盘中的ELF和内存中的ELF(进程内存映像)</strong></p><p><img src="/2025/07/23/New-Pwn/3527310-20250208214908605-1410877441.png"></p><p>写入数据总是从低地址向高地址写。</p><p><strong>虚拟内存</strong></p><p>实模式(可以直接操作物理地址)–&gt;保护模式(用户只能访问虚拟地址，间接地访问物理地址)</p><pre><code class=" mermaid">graph LRA[&quot;用户&quot;]B[&quot;OS&quot;]C[&quot;物理内存&quot;]A--系统调用--&gt;B--&gt;C</code></pre><p>物理内存虚拟内存分配：</p><pre><code class=" mermaid">graph TD  A[&quot;操作系统内核空间(共享)&quot;]   B[&quot;进程1&quot;]  C[&quot;进程n(独立)&quot;]  A--&gt;B &amp; ... &amp; C</code></pre><p>虚拟内存mmap段中<strong>动态链接库</strong>仅在物理内存中装载一份。</p><p>虚拟内存地址以字节编码，常以hex表示。</p><p><img src="/2025/07/23/New-Pwn/3527310-20250208223224788-686866354.png"></p><p><img src="/2025/07/23/New-Pwn/3527310-20250208223841687-963906141.png"></p><p><strong>段(segment)与节(section)</strong></p><p>段视图用于进程的内存区域的 rwx权限划分</p><p>节视图用于ELF文件编译链接时与在磁盘上存储时的文件结构的组织。</p><p>代码段(Text Seg)包含代码和只读数据:</p><ul><li>&#x3D;&#x3D;.text节&#x3D;&#x3D;</li><li>.rodata节</li><li>.hash节</li><li>…</li><li>&#x3D;&#x3D;.plt节(解析动态库)&#x3D;&#x3D;</li><li>.rel.got节</li></ul><p>数据段(Data segment)包含可读可写数据:</p><ul><li><p>.data节</p></li><li><p>.got节</p></li><li><p>&#x3D;&#x3D;.got.plt节(保存动态链接函数地址)&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;.bss节(不在磁盘占用空间，仅在内存占用，如未初始化的全局变量)&#x3D;&#x3D;</p></li><li><p>…</p></li></ul><p><strong>程序数据在内存中的组织方式简例</strong></p><p><img src="/2025/07/23/New-Pwn/3527310-20250208224726635-79418734.png"></p><p>函数内局部变量存放在栈，形参不映射，32位形参压栈，64位用寄存器”rsi,rbi…”存。</p><p> <strong>大小端序</strong></p><p>低位放低地址，高位放高地址。</p><p><strong>程序的装载与进程的执行</strong></p><p><img src="/2025/07/23/New-Pwn/image-20250827105513388.png" alt="image-20250827105513388"></p><p><strong>部分寄存器功能</strong></p><ul><li>RIP(存放下一条执行指令的地址)</li><li>RSP(存放当前栈帧的栈顶地址)</li><li>RBP(存放当前栈帧的栈底地址)</li><li>RAX(通用寄存器存放函数返回值)</li></ul><p><strong>静态链接的程序的执行过程</strong></p><pre><code class=" mermaid">graph LR  A[&quot;$./binary&quot;]  B[&quot;fork()&quot;]  C[&quot;execve&quot;]  D[&quot;kernel&quot;]  E[&quot;_start&quot;]  F[&quot;main()&quot;]  A--&gt;B--&gt;C--user to kernel--&gt;D--kernel to user--&gt;E--&gt;F</code></pre><p>fork():复制自身内存创建新进程</p><p>_start:准备执行环境</p><p><strong>动态链接</strong></p><pre><code class=" mermaid">graph LR  A[&quot;kernel&quot;]  B[&quot;ld.so&quot;]  C[&quot;_start&quot;]  D[&quot;__libc_start_main()&quot;]  E[&quot;Init()&quot;]  A--&gt;B--&gt;C--&gt;D--&gt;E--&gt;...</code></pre><p><strong>asm</strong></p><p>中括号[]:取括号内地址处的值</p><p>lea:取地址发送给指定寄存器</p><p>push:目标值压栈，SP-1</p><p>pop:将栈顶值弹出值指定位置，SP+1</p><p>leave:回复父栈帧，相当于<code>mov esp,ebp   pop ebp</code>，进行栈顶和栈底指针的迁移，从而完成整个栈帧的复原。</p><p>ret:相当于<code>pop rip</code>，指令执行指针返回到父函数的下一条指令处。</p><p>xor eax,eax:清空eax</p><p><strong>intel AT&amp;T</strong></p><p>区别不大，intel 被操作数在前，AT&amp;T操作数在前</p><h2 id="stack-overflow"><a href="#stack-overflow" class="headerlink" title="stack overflow"></a>stack overflow</h2><p>函数调用栈是一段连续的区域(高地址向低地址增长)，用来保存函数运行时的状态信息，包括函数参数与局部变量等。</p><p>调用者caller的状态被保存在栈顶，被调用者callee的状态被保存在栈底。</p><p><strong>函数调用栈的工作原理(x86)</strong></p><p><em>call xxx不仅是jmp至目标函数，还将下一条指令的地址自动压入栈。</em></p><p>例如下面简单caller与callee的执行步骤:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">callee</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret=a+b+c;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">caller</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br>    ret=callee(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    ret+=<span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2025/07/23/New-Pwn/3527310-20250209174900305-710147487.png" style="zoom:50%;"><p>首先，caller中<code>push %ebp; mov %esp,%ebp</code>使得栈底存储caller的caller的栈底地址，之后让esp与ebp对齐。<code>sub %0x10,%esp</code>将esp向低地址偏移16，为后续变量留出空间:</p><img src="/2025/07/23/New-Pwn/3527310-20250209193808793-908492273.png" style="zoom:67%;"><p>随后，把需要操作的三个数3，2，1逆序地压入栈中，开始<code>call</code>callee，eip转向callee的0地址，同时将下一条指令也就是23处的地址压入栈中:</p><img src="/2025/07/23/New-Pwn/3527310-20250209194232443-639590457.png" style="zoom:67%;"><p>进入callee后，用与caller相同的方法在栈中保存caller的基地址，同时将ebp与esp对齐，完成栈迁移。同时由于callee没有再用到局部变量，所以直接使用寄存器，对原栈中的数据进行求和操作并存储在eax存储器:</p><p><img src="/2025/07/23/New-Pwn/3527310-20250209194557858-612094562.png"></p><p>callee操作完成后，将栈顶的%ebp in caller弹出赋给ebp，将ebp还原到caller栈底，随后ret，进入caller的下一条指令:</p><img src="/2025/07/23/New-Pwn/3527310-20250209195055473-1544261024.png" style="zoom: 50%;"><p>随后<code>add $0xc,%esp</code>将原来的三个数据”销毁”，栈顶指针指向3个值以前，随后<code>mov  %eax,-0x4(%ebp)</code>将callee计算的结果存在int ret处，再进行<code>ret+=4</code>的计算，存储到eax中。</p><img src="/2025/07/23/New-Pwn/3527310-20250209200716854-62716620.png" style="zoom: 50%;"><p>随后<code>leave</code>+<code>ret</code>再次完成栈迁移并回到caller的caller(祖父)处，完成调用:</p><img src="/2025/07/23/New-Pwn/3527310-20250209201045379-1610210160.png" style="zoom:50%;"><p><strong>栈溢出攻击</strong></p><p>攻击程序的目的：拿到shell控制服务器。当函数执行内部指令时无法获得程序控制权，只有当发生函数调用或结束函数调用时，程序控制权会在函数状态之间跳转，此时才可能修改函数状态。而控制程序最关键的部分在于eip&#x2F;rip寄存器，因此我们的目的就是让eip&#x2F;rip载入攻击函数的地址。</p><p>当函数结束调用执行ret时，caller的返回地址会被传给eip，因此我们可以写入溢出数据使得攻击指令的地址覆盖原来的返回地址，就可以让我们想要的地址载入eip。</p><p>我们可以在溢出数据中包含攻击指令，也可以在内存其他位置寻找可用的攻击指令，然后将返回地址覆盖为后门函数。</p><p><strong>buffer overflow</strong></p><p>缓冲区写入超长数据造成溢出。</p><p><img src="/2025/07/23/New-Pwn/3527310-20250209204405714-474683409.png"></p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p><strong>IDA Pro</strong>:静态分析</p><p><strong>pwntools</strong>:python辅助攻击模块</p><p><strong>pwndbg</strong>:动态调试</p><p><strong>checksec</strong>:检查保护</p><p><strong>ROPgadget</strong>:寻找获取ROP</p><p><strong>one_gadget</strong>:寻找获取shell</p><h3 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA Pro"></a>IDA Pro</h3><p><strong>Tips:</strong></p><p>function window中，写死的函数用白色标识，动态链接的表项用粉色表示。</p><p>显示机器码:Option–&gt;Number of opcode bytes(non-graph)设定长度。</p><p>C与Asm对照:Ctrl+A全选–&gt;Copy to assembly </p><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><ul><li><p>调用库：<code>from pwn import *</code></p></li><li><p>设置io变量：本地：<code>io=process(&quot;./test&quot;)</code>；远程：<code>io=remote(&quot;localhost&quot;,port)</code></p></li><li><p>接受字符串：接收一行：<code>io.recvline()</code>；接收所有：<code>io.recv()</code></p></li><li><p>发送数据：<code>io.send(xxx)</code>，括号中必须是字节流，若是整数用p32()&#x2F;p64()转化，字节串b’ ‘包裹，用“+”连接。不可见字节可用”\x”发送；<code>io.sendline(xxx)</code>，在末尾加<code>\n</code>。</p></li><li><p>进入交互：<code>io.interactive()</code></p></li></ul><p>linux自带base64编码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> xxx | <span class="hljs-built_in">base64</span> -d<br></code></pre></td></tr></table></figure><h3 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h3><p>基本命令：</p><ul><li><p>进入调试：<code>gdb 程序名</code></p></li><li><p>下断点：<code>b *地址(0x形式)</code>  <code>b 函数名</code>   取消断点：<code>d 断点序号 </code></p></li><li><p>运行：<code>r</code>  步进：<code>s</code>  步过：<code>n</code></p></li><li><p>栈视图：<code>stack x</code> 显示栈的x项<br>窗口：</p></li><li><p>虚拟内存分布窗口：<code>vmmap</code></p></li><li><p>Register寄存器</p></li><li><p>Disasm反汇编窗口</p></li><li><p>Stack栈窗口，显示esp和ebp，低地址在上，数据从上向下写</p></li><li><p>若一段数据（如栈中）存放了指针，则会显示指针指向的内容</p></li></ul><p>程序在gdb中显示的地址与真实地址可能不符，但偏移一定是正确的。</p><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>利用程序本身的后门函数。</p><h3 id="buuctf-rip"><a href="#buuctf-rip" class="headerlink" title="buuctf rip"></a>buuctf rip</h3><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> payload=<span class="hljs-number">23</span>*<span class="hljs-string">b&#x27;A&#x27;</span>+p64(<span class="hljs-number">0x401186</span>+<span class="hljs-number">1</span>)<br><span class="hljs-number">2</span> payload=<span class="hljs-number">23</span>*<span class="hljs-string">b&#x27;A&#x27;</span>+p64(<span class="hljs-number">0x401016</span>)+p64(<span class="hljs-number">0x401186</span>)+p64(<span class="hljs-number">0</span>)  <span class="hljs-comment">#0x401016为ret</span><br><span class="hljs-number">3</span> payload=<span class="hljs-number">15</span>*<span class="hljs-string">b&#x27;A&#x27;</span>+p64(<span class="hljs-number">0x401186</span>)  <span class="hljs-comment">#仅在远端可以打通</span><br></code></pre></td></tr></table></figure><p>其中<code>0x401186</code>为系统调用shell后门函数的位置。</p><p>需要+1的原因或执行ret的原因：ubuntu18以上的64位程序，system需要进行栈对齐，所以应跳过一项栈指令，这样才能使得栈对齐。</p><p>详细：<a href="https://www.cnblogs.com/ZIKH26/articles/15996874.html">关于ubuntu18版本以上调用64位程序中的system函数的栈对齐问题 - ZikH26 - 博客园</a></p><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><p>有时需要自己构造shellcode。</p><p>初期将shellcode直接写入栈缓冲区，开启NX保护后栈缓冲区不可执行，故改为将shellcode向bss中写入或者向堆中写入，并用mprotect赋予其可执行权限。</p><p>如何获得shellcode?使用pwntools的shellcraft和asm模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">asm(shellcraft.sh())<br></code></pre></td></tr></table></figure><p>可以获得调用shell的shellcode硬编码。如果是64位下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">context.arch=<span class="hljs-string">&quot;amd64&quot;</span>  <span class="hljs-comment">#设置上下文</span><br>shellcraft.amd64.sh()<br></code></pre></td></tr></table></figure><p>w权限和x权限理应不能同时出现。</p><p>由于ASLR的存在，所以即使栈段可执行，我们也不知道栈的真实位置，所以我们并不知道我们写入数据的真实位置。但是Text&#x2F;Data&#x2F;Bss都可以找到，因为他们是ELF的固定内容，若PIE未开启，我们就可以定位到Bss的位置。因此我们可以将ret的位置覆盖为Bss的位置，并在Bss中写入shellcode，这样就可以使得函数ret到shellcode，劫持服务器。</p><p>某个ret2shellcode 32位题目的payload，输入会被拷贝到全局变量buf中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">buf=... <span class="hljs-comment">#某个全局变量的地址</span><br>sc=asm(shellcraft.sh())<br>payload=sc.ljust(<span class="hljs-number">112</span>,<span class="hljs-string">b&#x27;A&#x27;</span>)+p32(buf) <span class="hljs-comment">#ljust用于向右填充数据至指定长度，这里填垃圾数据至112位完成栈溢出</span><br></code></pre></td></tr></table></figure><h2 id="protect"><a href="#protect" class="headerlink" title="protect"></a>protect</h2><h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><p>栈不可执行。</p><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><img src="/2025/07/23/New-Pwn/3527310-20250213104824854-2020922544.png" style="zoom:50%;"><p>如图，打开canary保护的程序创建栈帧时，会在ebp的低地址的位置放置一段canary随机值，销毁栈帧时会首先检查canary是否被更改，如果更改那么程序直接崩溃退出。</p><h3 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h3><p>随机化栈，共享库，堆。</p><h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><p>随机化ELF文件本体。</p><h2 id="ROP返回导向编程"><a href="#ROP返回导向编程" class="headerlink" title="ROP返回导向编程"></a>ROP返回导向编程</h2><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>系统调用：OS给User的编程接口，是提供访问操作系统所管理的底层硬件的接口。本质上是一些内核函数代码，以规范的方式驱动硬件。x86通过int 0x80指令进行系统调用，amd64通过syscall进行系统调用。</p><p>例如x86中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,0xb<br>mov ebx,[&quot;/bin/sh&quot;]<br>mov ecx,0<br>mov edx,0<br>int 0x80<br></code></pre></td></tr></table></figure><p>以上调用可以执行<code>execve(&quot;bin/sh&quot;,NULL,NULL)</code></p><h3 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h3><p>ldd查看可执行程序所用到的动态链接库。</p><p>调用库函数如printf时，实际的函数实现在libc文件中，编译时将其载入shared library，程序调用时指向这个函数。</p><h3 id="Ret2syscall-ROP"><a href="#Ret2syscall-ROP" class="headerlink" title="Ret2syscall-ROP"></a>Ret2syscall-ROP</h3><p>例如我们想执行<code>execve(&quot;bin/sh&quot;,NULL,NULL)</code>这段指令以拿到shell，可程序中并没有现成的连续指令。但我们可以用组成该段程序的代码片段来组成我们想要的指令。</p><img src="/2025/07/23/New-Pwn/3527310-20250213204210976-1837842365.png" style="zoom: 50%;"><p>栈溢出后，溢出数据形成了ret-call-ret…链，从而形成了整个指令。</p><p>寻找这样的组件(gadget)需要ROPgadget工具，用例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ROPgadget --binary test --only &quot;pop|ret&quot; | grep eax<br></code></pre></td></tr></table></figure><p>该命令可以找到二进制程序中的<code>pop eax ;ret</code>gadget。</p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>确认没有后门函数后，准备打rop链。</p><p>首先用ROPgadget工具寻找<code>pop ret</code>gedget，组合gedget，先填垃圾数据到覆盖esp&#x2F;rsp，然后将构造好的gedget和数据依次写入payload，使用pwntools的<code>flat</code>函数可以将列表中的每一项转化为字节型，不足1字长的会补全。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload=flat([<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">112</span>,pop_eax_ret,<span class="hljs-number">0xb</span>,pop_edx_ecx_ebx_ret,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,bin_sh,int_0x80])<br></code></pre></td></tr></table></figure><p>pwntools创建elf文件对象以及相关方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">elf=ELF(&quot;./test&quot;)<br>elf.search(b&quot;/bin/sh&quot;)  #寻找字节型数据<br>next(...) #下一个地址<br>elf.got[&quot;puts&quot;] #返回puts函数在got表中表项的地址<br><br></code></pre></td></tr></table></figure><h3 id="动态链接过程"><a href="#动态链接过程" class="headerlink" title="动态链接过程"></a>动态链接过程</h3><p>静态链接和动态链接区别：静态链接编译时会将库函数全部写入文件，而动态链接只是做标识，表示将要用到某个库，因此静态链接文件要比动态链接文件大很多。 </p><p><img src="/2025/07/23/New-Pwn/3527310-20250214131538129-1645601842.png"></p><p>调用库函数foo的过程：</p><ul><li><p>进程首次调用foo时，跳转到.plt中的foo表项</p></li><li><p>.plt的foo表项立即跳转至.got.plt的foo表项，由于此时got表中目前没有foo的真实位置，因此跳回.plt</p></li><li><p>向栈中压入相关参数，为后续解析函数做好准备，随后<code>jmp</code>到got对应位置进行解析。</p></li><li><p>__dl_runtime_resolve函数解析foo的真实地址，填入.got.plt。</p></li><li><p>第二次及后续调用foo时，到plt-&gt;got后，由于第一次调用时已经填入了foo的真正地址，所以能够直接到达foo的真实地址。</p></li></ul><p><img src="/2025/07/23/New-Pwn/3527310-20250214163355814-201771566.png"></p><p><strong>pwndbg</strong></p><p><code>x/nx 地址</code> 显示地址的内容，n填要看的长度。</p><p><code>start</code>进入main函数第一行或进入程序入口。</p><p><code>backtrace</code>显示函数调用栈，呈现函数调用的父子关系。</p><p><code>return</code>退出当前函数</p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>动态链接的文件往往不能找到足够的gadget，因此我们的思路改为将rop链导向libc。</p><p>例如，程序中没有直接system(“&#x2F;bin&#x2F;sh”)，但是出现了system函数，这就会在程序plt表项中添加属于system()库函数的一项。因此只要我们将程序流劫持到system()plt表项处，就可以调用该函数。再传入参数”&#x2F;bin&#x2F;sh”即可。</p><p><img src="/2025/07/23/New-Pwn/3527310-20250214224729189-174960676.png"></p><p>got表项与实际函数的关系：</p><pre><code class=" mermaid">graph LRA[&quot;system@got&quot;]B[&quot;&amp;system&quot;]C[&quot;code of system in libc&quot;]A--&gt;B--&gt;C</code></pre><p>因此我们要跳转到的是<code>&amp;system</code>而不是<code>system@got</code></p><p><img src="/2025/07/23/New-Pwn/3527310-20250216113359742-635481886.png" alt="image-20250216113355817"></p><p>ret2shellcode，shellcode写入栈，nop滑梯应对ASLR：在shellcode下方填入足够长的nop链，指针指向确定的位置，这样大概率可以指向nop链的中间某个位置，这样程序就会一路执行nop到shellcode。</p><img src="/2025/07/23/New-Pwn/3527310-20250216115714310-1691751930.png" alt="image-20250216115710371" style="zoom: 50%;"><p>为什么参数要填到上面两个字长的位置？因为<code>system,exit</code>的第一条指令总是<code>push ebp</code>，此时ebp会占一个字长，那么函数想要调用传入的参数，就要向上数两个字长跳过caller’s ebp和retaddress才能找到参数。有时调用更多函数（3个及以上）的时候需要使用<code>pop_ret</code>gadget来构造。题目中没有给”&#x2F;bin&#x2F;sh”时，还需要调用read将其读入内存。</p><p>如何找到库函数的地址？回顾动态链接首次调用system的过程：</p><pre><code class=" mermaid">graph TDA[&quot;call system&quot;]B[&quot;system@plt&quot;]C[&quot;Resolver&quot;]D[&quot;system@got&quot;]E[&quot;system@glibc&quot;]A--&gt;B--1--&gt;D--2--&gt;B--3--&gt;C--4--&gt;D--&gt;E</code></pre><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/</a></p><p><a href="https://www.cnblogs.com/unr4v31/p/14446412.html">https://www.cnblogs.com/unr4v31/p/14446412.html</a></p><p><a href="https://sourceware.org/glibc/wiki/MallocInternals">https://sourceware.org/glibc/wiki/MallocInternals</a></p><h3 id="Ptmalloc2-Overview"><a href="#Ptmalloc2-Overview" class="headerlink" title="Ptmalloc2 Overview"></a>Ptmalloc2 Overview</h3><p>glibc采用ptmalloc2进行堆管理。核心概念如下：</p><h4 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h4><p>ptmalloc2中，堆内存被分割为称作<code>chunk</code>的单元，每个chunk可以表示正在被使用&#x2F;空闲的内存。一个chunk通常分为：</p><ul><li>Header：存储管理信息</li><li>User Data：真正给用户使用的内存区域</li></ul><p>chunk的头部包含的信息：</p><ul><li><p><code>prev_size</code>: 如果前一个物理相邻的 chunk 是空闲的，那么这个字段记录了前一个 chunk 的大小。如果前一个 chunk 正在被使用，这个字段则可以被前一个 chunk 用来存储数据。</p></li><li><p><code>size</code>: 当前 chunk 的大小。这个大小必须是 8 字节（32位系统）或 16 字节（64位系统）的倍数，以保证内存对齐。</p></li><li><p><code>A/M/P</code> 标志位 (在 <code>size</code> 字段的最低三位):</p><ul><li><p><strong>A (Allocated&#x2F;Arena):</strong> 如果为 0，表示当前 chunk 属于主分配区 (main_arena)。如果为 1，表示属于线程分配区 (thread arena)。</p></li><li><p><strong>M (Mmapped):</strong> 如果为 1，表示这个 chunk 是通过 <code>mmap</code> 系统调用直接从操作系统分配的，不属于任何 arena。这种 chunk 在释放时会直接通过 <code>munmap</code> 还给操作系统。</p></li><li><p><strong>P (Previous in use):</strong> 如果为 1，表示前一个物理相邻的 chunk 正在被使用。如果为 0，表示前一个 chunk 是空闲的。这个标志位是一个非常重要的优化，它使得 ptmalloc2 可以快速判断前一个 chunk 的状态，从而决定是否进行向前合并。</p></li></ul></li><li><p>当一个 chunk 变为空闲状态时，它的用户数据区会被用来存储两个指针 <code>fd</code> (forward) 和 <code>bk</code> (backward)，用于将它链接到相应的空闲链表（bin）中。</p></li></ul><p><img src="/2025/07/23/New-Pwn/used_chunk.drawio.png" alt="using_chunk"></p><p><img src="/2025/07/23/New-Pwn/free_chunk.drawio.png" alt="free_chunk"></p><p>关于(s)brk和mmap系统调用：</p><ul><li><p><strong><code>brk</code>&#x2F;<code>sbrk</code>:</strong> 这是管理堆（heap）的“传统”方式。一般情况下，程序的内存data段末尾有一个叫做 <code>program break</code> 的指针。调用 <code>brk</code> 就是告诉操作系统：“请把我的程序内存末尾向高地址移动一段距离，扩大我的堆空间。” 这样做得到的堆空间是<strong>连续的、线性增长的</strong>。主分配区（main_arena）主要使用这种方式来扩展自己的内存池（Top Chunk）。</p></li><li><p><strong><code>mmap</code>:</strong> 这种方式不依赖于那个连续的堆。它可以在虚拟地址空间的任何合适位置“空降”一块新的内存区域。这块区域与主堆（main heap）在物理上和逻辑上都可以是完全不相连的。</p></li></ul><h4 id="Arena"><a href="#Arena" class="headerlink" title="Arena"></a>Arena</h4><p>为了解决多线程环境下的锁竞争问题，ptmalloc2 引入了 <strong>Arena</strong> (分配区) 的概念。</p><ul><li><strong>主分配区 (Main Arena):</strong> 这是进程中第一个，也是唯一一个可以动态增长和收缩的 Arena。它直接管理通过 <code>brk</code> 或 <code>sbrk</code> 系统调用扩展的堆内存。</li><li><strong>线程分配区 (Thread Arenas):</strong> 当多个线程同时请求内存时，如果主分配区被锁定，为了避免线程阻塞等待，ptmalloc2 会为新线程创建独立的 Arena。这些 Arena 通过 <code>mmap</code> 系统调用向操作系统申请大块内存（称为 heap segment），然后在这个内存块上进行 chunk 的切分和管理。</li></ul><h4 id="Bins"><a href="#Bins" class="headerlink" title="Bins"></a>Bins</h4><p>当一个 chunk被 <code>free</code> 之后，它不会立即归还给操作系统，而是会被放入一个叫做 <strong>bin</strong> 的空闲链表中，以备后续的 <code>malloc</code> 请求复用。ptmalloc2 为了优化不同大小内存的分配效率，设计了多种不同的 bin：</p><ul><li><strong>Fast Bins:</strong><ul><li><strong>特点:</strong> 用于存放小尺寸的 chunk（通常小于等于 80 字节，64位系统）。这是一个<strong>单向链表</strong> (只用 <code>fd</code> 指针)，并且采用<strong>后进先出 (LIFO)</strong> 的策略。</li><li><strong>优点:</strong> 速度极快。放入和取出 chunk 只是简单的头插法和头删法。并且，fastbin 中的 chunk 即使被释放，它的 <code>P</code> (Previous in use) 标志位也 <strong>不会</strong> 被清零，因此不会与相邻的空闲 chunk 合并。这避免了合并操作的开销，使得小内存的频繁分配和释放非常高效。</li><li><strong>缺点:</strong> 可能会产生大量的内存碎片。</li></ul></li><li><strong>Unsorted Bin:</strong><ul><li><strong>特点:</strong> 这是一个“中转站”或者说“回收站”。除了 fastbin 范围外的 chunk，当它们被 <code>free</code> 时，或者当 <code>malloc</code> 需要分割一个大的 chunk 产生剩余部分时，这些 chunk <strong>首先</strong> 都会被放入 unsorted bin。它是一个 <strong>双向循环链表</strong>。</li><li><strong>目的:</strong> 给这些刚被释放的 chunk 一个被快速复用的机会。当下次 <code>malloc</code> 请求时，会先遍历 unsorted bin，看是否有大小合适的 chunk 可以直接使用。这利用了程序行为的“时间局部性”原理：刚释放的内存很可能马上又会被申请使用。</li></ul></li><li><strong>Small Bins:</strong><ul><li><strong>特点:</strong> 用于存放固定大小的小 chunk（通常小于 512 字节，64位系统）。每个 small bin 都对应一个精确的 chunk 大小。例如，有一个 bin 专门存放 32 字节的 chunk，另一个专门存放 48 字节的 chunk。它们都是 <strong>双向循环链表</strong>，并采用 <strong>先进先出 (FIFO)</strong> 的策略。</li><li><strong>优点:</strong> 查找和取用非常快，因为不需要遍历，直接去对应大小的 bin 里取第一个就行。</li></ul></li><li><strong>Large Bins:</strong><ul><li><strong>特点:</strong> 用于存放大小不固定的 chunk（大于等于 512 字节，64位系统）。它不像 small bin 那样每个 bin 对应一个精确的大小，而是一个 bin 对应一个大小范围。同一个 large bin 中的 chunk <strong>按大小降序排列</strong> (大的在前，小的在后)。</li><li><strong>优点:</strong> 可以在一个范围内快速找到一个“最佳适配” (best-fit) 的 chunk。当需要分配一个大小时，会从对应的 bin 中遍历，找到第一个大于等于所需大小的 chunk。如果这个 chunk 过大，就会进行切割，一部分返回给用户，另一部分（剩余部分）重新放入 unsorted bin 中。</li></ul></li></ul><h4 id="malloc-和-free-的工作流程"><a href="#malloc-和-free-的工作流程" class="headerlink" title="malloc 和 free 的工作流程"></a>malloc 和 free 的工作流程</h4><h5 id="malloc-size-流程简述"><a href="#malloc-size-流程简述" class="headerlink" title="malloc(size) 流程简述:"></a><code>malloc(size)</code> 流程简述:</h5><ol><li><strong>获取 Arena:</strong> 线程首先确定要使用的 Arena 并尝试加锁。</li><li><strong>计算实际大小:</strong> 将用户请求的 <code>size</code> 转换为内部实际需要的 chunk 大小（加上头部大小并进行内存对齐）。</li><li><strong>尝试 Fastbin:</strong> 如果请求的大小在 fastbin 范围内，直接去对应的 fastbin 链表头取下一个 chunk。如果成功，直接返回用户数据区指针。</li><li><strong>尝试 Smallbin:</strong> 如果请求的大小在 smallbin 范围内，直接去对应的 smallbin 链表取最后一个 chunk（FIFO）。如果成功，返回用户数据区指针。</li><li><strong>合并 Fastbins:</strong> 如果 smallbin 中没有，为了产生更大的空闲块，ptmalloc2 可能会触发一次 fastbin 的整理，将 fastbin 中所有 chunk 合并，并放入 unsorted bin。这个过程称为 <code>malloc_consolidate</code>。</li><li><strong>遍历 Unsorted Bin:</strong> 遍历 unsorted bin 中的每一个 chunk：<ul><li>如果大小完全匹配，直接取用并返回。</li><li>如果大小在 smallbin 范围内但未完全匹配，则将其放入对应的 smallbin。</li><li>如果大小在 largebin 范围内，则将其放入对应的 largebin。</li><li>如果 chunk 足够大，可以分割，则分割成两部分：一部分返回给用户，剩余部分重新放入 unsorted bin 的头部。</li></ul></li><li><strong>查找 Largebin:</strong> 如果在 unsorted bin 中没找到合适的，就去对应的 largebin 中查找。从后往前找一个大小最合适的 chunk 进行分割。</li><li><strong>求助 Top Chunk:</strong> 如果所有 bin 中都没有合适的 chunk，就会求助于 <strong>Top Chunk</strong>。Top Chunk 是 Arena 顶部最大的一块空闲内存。如果 Top Chunk 足够大，就从中切割一块返回。</li><li><strong>扩展堆&#x2F;mmap:</strong> 如果 Top Chunk 也不够大，ptmalloc2 就会：<ul><li>对于主分配区 (main_arena)，调用 <code>sbrk</code> 扩展堆，增大 Top Chunk。</li><li>对于线程分配区 (thread_arena)，调用 <code>mmap</code> 分配新的 heap segment。</li><li>如果请求的内存非常大（通常 &gt; 128KB），可能会直接通过 <code>mmap</code> 分配，这块内存独立管理，不受 Arena 控制。</li></ul></li></ol><h5 id="free-ptr-流程简述"><a href="#free-ptr-流程简述" class="headerlink" title="free(ptr) 流程简述:"></a><code>free(ptr)</code> 流程简述:</h5><ol><li><strong>检查指针:</strong> 检查传入的指针 <code>ptr</code> 是否为空，如果是则直接返回。</li><li><strong>计算 chunk 地址:</strong> 根据用户指针 <code>ptr</code> 计算出它所属的 chunk 的头部地址。</li><li><strong>尝试放入 Fastbin:</strong> 如果 chunk 的大小在 fastbin 范围内，直接以头插法的方式放入对应的 fastbin 链表，然后返回。不做任何合并检查。</li><li><strong>检查 Mmapped Chunk:</strong> 检查 chunk 的 <code>M</code> 标志位。如果是通过 <code>mmap</code> 分配的，直接调用 <code>munmap</code> 将其归还给操作系统。</li><li><strong>进行合并:</strong> 如果不是 fastbin chunk：<ul><li>检查 <code>P</code> 标志位，判断前一个物理相邻的 chunk 是否空闲。如果是，则进行 <strong>向后合并</strong> (合并到前一个 chunk)。</li><li>检查下一个物理相邻的 chunk 是否是 Top Chunk 或者空闲 chunk。如果是，则进行 <strong>向前合并</strong> (将下一个 chunk 合并进来)。</li></ul></li><li><strong>放入 Unsorted Bin:</strong> 将合并后得到的（可能更大的）空闲 chunk 放入 unsorted bin 中，等待下一次 <code>malloc</code> 时被整理和复用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How was this blog built</title>
    <link href="/2025/07/15/Blog/"/>
    <url>/2025/07/15/Blog/</url>
    
    <content type="html"><![CDATA[<p>基于hexo framework,  windows</p><h2 id="Internet-Environment-related"><a href="#Internet-Environment-related" class="headerlink" title="Internet Environment related"></a>Internet Environment related</h2><p>npm源在国外，懂得都懂</p><p>配置代理或用cnpm&#x2F;淘宝源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> proxy=<br>npm config <span class="hljs-built_in">set</span> https-proxy=<br><br>npm config <span class="hljs-built_in">set</span> registry http://registry.npm.taobao.org/<br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org/<br></code></pre></td></tr></table></figure><p>然而hexo发展很快，cnpm可能跟不上，有条件最好用npm</p><h2 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="Init-blog"><a href="#Init-blog" class="headerlink" title="Init blog"></a>Init blog</h2><p>在要创建博客的文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><p>这里会先clone仓库再安装依赖</p><p>如果卡git clone，检查下代理设置(npm,git)</p><p>如果卡<code>install dependencies</code>或者直接失败，一般还是代理问题。可以<code>Ctrl+C</code>先杀死进程，再：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install<br></code></pre></td></tr></table></figure><p>所以在赤旗插遍全球之前有些技能还是得掌握的（</p><h2 id="Start-blog"><a href="#Start-blog" class="headerlink" title="Start blog"></a>Start blog</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>此时访问本地4000端口，可以看到hello world博客文章的界面：</p><p><img src="/2025/07/15/Blog/image-20250715093844826.png" alt="image-20250715093844826"></p><p>可用于预览博客在浏览器上的效果。</p><h2 id="Create-a-new-article"><a href="#Create-a-new-article" class="headerlink" title="Create a new article"></a>Create a new article</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;title&quot;</span><br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo n <span class="hljs-string">&quot;My test article&quot;</span><br>INFO  Validating config<br>INFO  Created: D:\Blog\<span class="hljs-built_in">source</span>\_posts\My-test-article.md<br></code></pre></td></tr></table></figure><p>此时可看到<code>\source\_posts\My-test-article.md</code>文件已创建</p><p>现在对其进行编辑：</p><p><img src="/2025/07/15/Blog/image-20250715095230842.png" alt="image-20250715095230842"></p><p>现在先回退到<code>blog</code>下，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br></code></pre></td></tr></table></figure><p>启动看下效果：</p><p><img src="/2025/07/15/Blog/image-20250715095555855.png" alt="image-20250715095555855"></p><p>好吧貌似LaTeX没法渲染，研究下怎么弄。</p><h2 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h2><p>有时候不希望直接发布写了一半的草稿，这时可以使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new draft &lt;title&gt;<br></code></pre></td></tr></table></figure><p>来创建新草稿，内容在<code>source/_draft</code>文件夹。</p><p>正式推送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bahs">hexo publish &lt;title&gt;<br></code></pre></td></tr></table></figure><p>预览时渲染草稿：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash'">hexo s --draft<br></code></pre></td></tr></table></figure><h2 id="deploy-the-blog"><a href="#deploy-the-blog" class="headerlink" title="deploy the blog"></a>deploy the blog</h2><p>没有服务器那只好部署到github了</p><p>创建一个New repository, 名称为<code>nickname.github.io</code></p><p>下载git部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><p>配置<code>_config.yml</code>，底部<code>deploy:</code>如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo: <span class="hljs-string">&#x27;https://github.com/murasame-mio-misaki/murasame-mio-misaki.github.io.git&#x27;</span> <span class="hljs-comment">#link of repo</span><br>  branch: <span class="hljs-string">&#x27;master&#x27;</span><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>部署，就会自动将渲染好的博客前端push向仓库</p><p>通过<code>nickname.github.io</code> 这个域名来访问即可</p><h2 id="custom-theme"><a href="#custom-theme" class="headerlink" title="custom theme"></a>custom theme</h2><p>先套github主题后面慢慢玩吧。</p><p>用了一下fluid主题，挺喜欢的，那就你了。</p><p>按照主题官方文档配置可以支持LaTeX，mermaid等。</p><h2 id="update-pictures"><a href="#update-pictures" class="headerlink" title="update pictures"></a>update pictures</h2><p>关于Hexo+Typora工作流中上传图片的问题：</p><p><a href="https://dianayyds.github.io/2024/04/26/hexo-typora/">hexo与typora结合 | 九日的个人博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Miscellaneous things</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Build Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Series (Git/Github)</title>
    <link href="/2025/07/15/Git/"/>
    <url>/2025/07/15/Git/</url>
    
    <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="concept"><a href="#concept" class="headerlink" title="concept"></a>concept</h3><p>distributive version controller</p><p>Example of version controlling in developing cooperation:</p><p><img src="/2025/07/15/Git/image-20250714142050243.png" alt="image-20250714142050243"></p><h3 id="working-mechanism"><a href="#working-mechanism" class="headerlink" title="working mechanism"></a>working mechanism</h3><p><img src="/2025/07/15/Git/image-20250714162939404.png" alt="image-20250714162939404"></p><p>Workspace is not IDE, but the index of the code(On disk) .</p><p><code>git add</code> just add the code temporarily into temporary storages.</p><p>After <code>git commit</code>, the history version is created in the local lib, which cannot be deleted.(Unless deleting the whole local lib)</p><p>remote code host center (remote lib) on Internet:  github</p><p>on LAN: GitLab</p><h3 id="common-command"><a href="#common-command" class="headerlink" title="common command"></a>common command</h3><ul><li>set user signature:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name [name]<br>git config --global user.email [email@example.com]<br></code></pre></td></tr></table></figure><p>The signature is an ID justification. The email you set should be your github account.</p><ul><li>Initialize local lib</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>Suppose the project is in the folder <code>git-demo</code>, then under this folder, start the git bash, enter the command above, then git get authorization of the folder <code>git-demo</code>, and initialized the local lib.</p><ul><li>check status</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><p>example log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master //on <span class="hljs-built_in">which</span> branch<br>no commits yet //blank git lib<br>nothing to commit<br></code></pre></td></tr></table></figure><p>add a new file <code>hello.txt</code> under the project and input “hello world.”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>        hello.txt<br>//hello.txt is only <span class="hljs-keyword">in</span> the workspace, but not added <span class="hljs-keyword">in</span> the cache, so it<span class="hljs-string">&#x27;s not been tracked by git</span><br><span class="hljs-string">            </span><br><span class="hljs-string">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><ul><li>add files to cache</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add [filename]<br></code></pre></td></tr></table></figure><p>after <code>git add hello.txt</code>, the status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master<br><br>No commits yet<br><br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br>        new file:   hello.txt<br><br></code></pre></td></tr></table></figure><ul><li>commit the file to the local lib</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;log message&quot;</span> [filename]<br></code></pre></td></tr></table></figure><p>Example: after <code>git commit -m &quot;my first commit&quot; hello.txt</code>, the log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">warning: <span class="hljs-keyword">in</span> the working copy of <span class="hljs-string">&#x27;hello.txt&#x27;</span>, LF will be replaced by CRLF the next <span class="hljs-keyword">time</span> Git touches it<br>[master (root-commit) 64c69a6] hello git commit<br> 1 file changed, 1 insertion(+)<br> create mode 100644 hello.txt<br><br></code></pre></td></tr></table></figure><p>the status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master<br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure><ul><li>check log</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog<br>64c69a6 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): hello git commit<br></code></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br>commit 64c69a6abe6429b73df0648c46c809104003c0d1 (HEAD -&gt; master)<br>Author: Miss.m &lt;example@gmail.com&gt;<br>Date:   Mon Jul 14 17:19:23 2025 +0800<br><br>    hello git commit<br><br></code></pre></td></tr></table></figure><p><strong>Version iteration stimulation Example</strong></p><p>For example, now change the content in <code>hello.txt</code> to “hello world again.” to create a new version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master<br>Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)<br>  (use <span class="hljs-string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="hljs-keyword">in</span> working directory)<br>        modified:   hello.txt<br><br>no changes added to commit (use <span class="hljs-string">&quot;git add&quot;</span> and/or <span class="hljs-string">&quot;git commit -a&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>after <code>git add</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master<br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)<br>        modified:   hello.txt<br></code></pre></td></tr></table></figure><p><code>git commit</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">warning: <span class="hljs-keyword">in</span> the working copy of <span class="hljs-string">&#x27;hello.txt&#x27;</span>, LF will be replaced by CRLF the next <span class="hljs-keyword">time</span> Git touches it<br>[master 522457b] second commit<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br></code></pre></td></tr></table></figure><p>now check the version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">522457b (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: second commit<br>64c69a6 HEAD@&#123;1&#125;: commit (initial): hello git commit<br></code></pre></td></tr></table></figure><p>There are 2 versions in the local lib and the pointer points to the second committed version currently.</p><ul><li>Version shuttle</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard [version <span class="hljs-built_in">id</span>]<br></code></pre></td></tr></table></figure><p>for example,  shuttle to ver1 of <code>hello.txt</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard 64c69a6<br>HEAD is now at 64c69a6 hello git commit<br><br>git reflog<br>64c69a6 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 64c69a6<br>522457b HEAD@&#123;1&#125;: commit: second commit<br>64c69a6 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): hello git commit<br><br><span class="hljs-built_in">cat</span> hello.txt<br>hello world.  <span class="hljs-comment">#hello.txt ver1</span><br></code></pre></td></tr></table></figure><p><img src="/2025/07/15/Git/image-20250714185201838.png" alt="image-20250714185201838"></p><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p>In the version control process, when advancing multiple tasks at the same time, you can create an independent branch for each task. Using branches means that developers <strong>separate</strong> their tasks from the main line of development, and when developing their own branches, it will not affect the main line.</p><p>explanation:</p><p><img src="/2025/07/15/Git/image-20250714191718196.png" alt="image-20250714191718196"></p><p>Programmer A want to add function A for the project, so it forks a branch <code>Task A</code> from the ver1.0 <code>Master</code> branch. After development, he unions <code>Task A</code> to the main branch, and update it to ver1.1. Then the Infra found some bugs in ver1.1, so he forks a branch <code>Hot fix</code> from the ver1.1 <code>Master</code> branch, fixing the bugs, and update the <code>Master</code> to ver1.2. </p><h3 id="branch-operations"><a href="#branch-operations" class="headerlink" title="branch operations"></a>branch operations</h3><ul><li><p>check branches:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -v<br></code></pre></td></tr></table></figure></li><li><p>add branch:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch [branchname]<br></code></pre></td></tr></table></figure></li><li><p>branch shuttle:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout [branchname]<br></code></pre></td></tr></table></figure></li></ul><p>example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> hello.txt<br>hello world.<br><br>$ git branch -v<br>* master 64c69a6 hello git commit<br><br>$ git branch hot-fix<br><br>$ git branch -v<br>  hot-fix 64c69a6 hello git commit<br>* master  64c69a6 hello git commit<br><br>$ git checkout hot-fix<br>Switched to branch <span class="hljs-string">&#x27;hot-fix&#x27;</span><br><br>$ git branch -v<br>* hot-fix 64c69a6 hello git commit<br>  master  64c69a6 hello git commit<br><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello fixed&quot;</span> &gt; hello.txt<br><br>$ git status<br>On branch hot-fix<br>Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)<br>  (use <span class="hljs-string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="hljs-keyword">in</span> working directory)<br>        modified:   hello.txt<br><br>no changes added to commit (use <span class="hljs-string">&quot;git add&quot;</span> and/or <span class="hljs-string">&quot;git commit -a&quot;</span>)<br><br>$ git add hello.txt<br>warning: <span class="hljs-keyword">in</span> the working copy of <span class="hljs-string">&#x27;hello.txt&#x27;</span>, LF will be replaced by CRLF the next <span class="hljs-keyword">time</span> Git touches it<br><br>$ git commit -m <span class="hljs-string">&quot;hot-fix first commit&quot;</span> hello.txt<br>warning: <span class="hljs-keyword">in</span> the working copy of <span class="hljs-string">&#x27;hello.txt&#x27;</span>, LF will be replaced by CRLF the next <span class="hljs-keyword">time</span> Git touches it<br>[hot-fix 1a25fb0] hot-fix first commit<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br><br>$ <span class="hljs-built_in">cat</span> hello.txt<br>Hello fixed<br><br>$ git checkout master<br>Switched to branch <span class="hljs-string">&#x27;master&#x27;</span><br><br>$ <span class="hljs-built_in">cat</span> hello.txt<br>hello world.<br><br></code></pre></td></tr></table></figure><ul><li><p>branch merge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge [branchname]<br></code></pre></td></tr></table></figure><p>can merge specific branch to the current one.</p><p>example1(without confliction):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git merge hot-fix<br>Updating 64c69a6..1a25fb0<br>Fast-forward<br> hello.txt | 2 +-<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br><br>$ <span class="hljs-built_in">cat</span> hello.txt<br>Hello fixed<br><br></code></pre></td></tr></table></figure><p><strong>conflict</strong></p><p>  Two different branches fixed the same position of the same file differently. In that case, Git cannot determine which one to deserve, then it causes conflict.</p><p>  example2(confliction):</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim hello.txt<br><br>$ <span class="hljs-built_in">cat</span> hello.txt<br>Hello fixed 111<br><br>$ git add hello.txt<br><br>$ git status<br>On branch master<br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)<br>        modified:   hello.txt<br><br><br>$ git commit -m <span class="hljs-string">&quot;master commit 111&quot;</span> hello.txt<br>[master bd2481a] master commit 111<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br><br>$ git checkout hot-fix<br>Switched to branch <span class="hljs-string">&#x27;hot-fix&#x27;</span><br><br>$ <span class="hljs-built_in">cat</span> hello.txt<br>Hello fixed<br><br>$ vim hello.txt<br><br>$ <span class="hljs-built_in">cat</span> hello.txt<br>Hello fixed 222<br><br>$ git add hello.txt<br><br>$ git commit -m <span class="hljs-string">&quot;hot-fix commit 222&quot;</span> hello.txt<br>[hot-fix 185866c] hot-fix commit 222<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br><br>$ git checkout master<br>Switched to branch <span class="hljs-string">&#x27;master&#x27;</span><br><br>$ git merge hot-fix<br>Auto-merging hello.txt<br>CONFLICT (content): Merge conflict <span class="hljs-keyword">in</span> hello.txt<br>Automatic merge failed; fix conflicts and <span class="hljs-keyword">then</span> commit the result.<br><br>$ git status<br>On branch master<br>You have unmerged paths.<br>  (fix conflicts and run <span class="hljs-string">&quot;git commit&quot;</span>)<br>  (use <span class="hljs-string">&quot;git merge --abort&quot;</span> to abort the merge)<br><br>Unmerged paths:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)<br>        both modified:   hello.txt<br><br>no changes added to commit (use <span class="hljs-string">&quot;git add&quot;</span> and/or <span class="hljs-string">&quot;git commit -a&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>The log <code>Automatic merge failed; fix conflicts and then commit the result.</code> shows that the merge was failed, because <code>master</code> and <code>hot-fix</code> fixed the same file <code>hello.txt</code> .</p><p>As a result, we need to merge the code manually.</p><p>now check the file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> hello.txt<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="hljs-string">HEAD</span><br><span class="hljs-string">Hello fixed 111</span><br><span class="hljs-string">=======</span><br><span class="hljs-string">Hello fixed 222</span><br><span class="hljs-string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span><br></code></pre></td></tr></table></figure><p>The code between <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> and <code>=======</code> is what the current branch has in the file, while the code between <code>=======</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</code> is that in the branch <code>hot fix</code>.</p><p>Now suppose that we’d like to keep the <code>hot-fix</code> version, then delete the special lines which are combined of <code>&gt; = &lt;</code>， and keep <code>Hello fixed 222</code>, then:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> hello.txt<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="hljs-string">HEAD</span><br><span class="hljs-string">Hello fixed 111</span><br><span class="hljs-string">=======</span><br><span class="hljs-string">Hello fixed 222</span><br><span class="hljs-string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">$ vim hello.txt</span><br><span class="hljs-string"></span><br><span class="hljs-string">$ cat hello.txt</span><br><span class="hljs-string">Hello fixed 222</span><br><span class="hljs-string"></span><br><span class="hljs-string">$ git add hello.txt</span><br><span class="hljs-string"></span><br><span class="hljs-string">-$ git commit -m &quot;Merge test&quot;</span><br><span class="hljs-string">[master c1996a0] Merge test</span><br><span class="hljs-string"></span><br><span class="hljs-string">-$ cat hello.txt</span><br><span class="hljs-string">Hello fixed 222</span><br><span class="hljs-string"></span><br><span class="hljs-string">-$ git status</span><br><span class="hljs-string">On branch master</span><br><span class="hljs-string">nothing to commit, working tree clean</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="git-cooperation-mode"><a href="#git-cooperation-mode" class="headerlink" title="git cooperation mode"></a>git cooperation mode</h3><ul><li><p>collaboration within a team:</p><p>  <img src="/2025/07/15/Git/image-20250714201103007.png" alt="image-20250714201103007"></p></li><li><p>Cross-team collaboration:</p><p>  <img src="/2025/07/15/Git/image-20250714213327829.png" alt="image-20250714213327829"></p></li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h3><p><img src="/2025/07/15/Git/image-20250714214627445.png" alt="image-20250714214627445"></p><p><img src="/2025/07/15/Git/image-20250714215206613.png" alt="image-20250714215206613"></p><p>Creating an Alias for the remote lib:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add [<span class="hljs-built_in">alias</span>] [remotelib]<br></code></pre></td></tr></table></figure><p>Check the alias:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br></code></pre></td></tr></table></figure><p>example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote -v<br><br>$ git remote add git-test https://github.com/murasame-mio-misaki/git-test.git<br><br>$ git remote -v<br>git-test        https://github.com/murasame-mio-misaki/git-test.git (fetch)<br>git-test        https://github.com/murasame-mio-misaki/git-test.git (push)<br><br></code></pre></td></tr></table></figure><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push [<span class="hljs-built_in">alias</span>] [branch]<br></code></pre></td></tr></table></figure><p>example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> hello.c<br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()<br>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello Github!&quot;</span>);<br>        <span class="hljs-built_in">return</span> 0;<br>&#125;<br><br><br>$ git reflog<br>fb7bd98 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): murasame master first commit<br><br>$ git push git-test master<br>Enumerating objects: 3, <span class="hljs-keyword">done</span>.<br>Counting objects: 100% (3/3), <span class="hljs-keyword">done</span>.<br>Delta compression using up to 32 threads<br>Compressing objects: 100% (2/2), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (3/3), 295 bytes | 295.00 KiB/s, <span class="hljs-keyword">done</span>.<br>Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)<br>To https://github.com/murasame-mio-misaki/git-test.git<br> * [new branch]      master -&gt; master<br><br></code></pre></td></tr></table></figure><p><img src="/2025/07/15/Git/image-20250714220815017.png" alt="image-20250714220815017"></p><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull [<span class="hljs-built_in">alias</span>] [branch]<br></code></pre></td></tr></table></figure><p>example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git pull git-test master<br>remote: Enumerating objects: 5, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (5/5), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (2/2), <span class="hljs-keyword">done</span>.<br>remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)<br>Unpacking objects: 100% (3/3), 979 bytes | 97.00 KiB/s, <span class="hljs-keyword">done</span>.<br>From https://github.com/murasame-mio-misaki/git-test<br> * branch            master     -&gt; FETCH_HEAD<br>   fb7bd98..a0352da  master     -&gt; git-test/master<br>Updating fb7bd98..a0352da<br>Fast-forward<br> hello.c | 1 +<br> 1 file changed, 1 insertion(+)<br><br>$ <span class="hljs-built_in">cat</span> hello.c<br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()<br>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello Github!&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello midori!&quot;</span>);<br>        <span class="hljs-built_in">return</span> 0;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [remotelib]<br></code></pre></td></tr></table></figure><h3 id="Add-collaborator"><a href="#Add-collaborator" class="headerlink" title="Add collaborator"></a>Add collaborator</h3><p><img src="/2025/07/15/Git/image-20250714222556042.png" alt="image-20250714222556042"></p><p><img src="/2025/07/15/Git/image-20250714222707340.png" alt="image-20250714222707340"></p><p><img src="/2025/07/15/Git/image-20250714222818997.png" alt="image-20250714222818997"></p><h3 id="Commit-and-push-automatically-in-Vscode-IntelliJ-…"><a href="#Commit-and-push-automatically-in-Vscode-IntelliJ-…" class="headerlink" title="Commit and push automatically in Vscode&#x2F;IntelliJ&#x2F;…"></a>Commit and push automatically in Vscode&#x2F;IntelliJ&#x2F;…</h3><p><img src="/2025/07/15/Git/image-20250805114427768.png" alt="image-20250805114427768"></p>]]></content>
    
    
    <categories>
      
      <category>Miscellaneous things</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My test article</title>
    <link href="/2025/07/15/My-test-article/"/>
    <url>/2025/07/15/My-test-article/</url>
    
    <content type="html"><![CDATA[<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul><li>Testing math…</li></ul><p>$$<br>\mathcal{F}{f(t)}(\omega) &#x3D; F(\omega) &#x3D; \int_{-\infty}^{\infty} f(t) e^{-i\omega t} dt<br>$$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><del>Testing code…</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello my new blog!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><p><em>Testing mermaid…</em></p><pre><code class=" mermaid">graph TDA[&quot;Murasame&quot;]B[&quot;Mio&quot;]C[&quot;Misaki&quot;]A&lt;--connect--&gt;B&lt;--connect--&gt;C</code></pre><h2 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a>Picture</h2><p><strong>Testing picture…</strong></p><p><img src="/2025/07/15/My-test-article/ayane.jpg" alt="ayane"></p>]]></content>
    
    
    <categories>
      
      <category>Hello test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Meaningless trash</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
